import React, { useState, useEffect, useRef } from "react";
import { useParams, useLocation } from "react-router-dom";

import {
  MessageSquare,
  BarChart2,
  Brain,
  User,
  Loader2,
  Send,
  ChevronDown,
  HelpCircle,
  FileText,
  Target,
  Briefcase,
  Building,
  Users,
  Settings,
  Tag,
  Calendar,
  Clock,
  Filter,
  Layers,
  Bookmark,
  CheckCircle2,
  ChevronUp,
  Globe,
  Megaphone,
  X,
} from "lucide-react";
import ReactMarkdown from "react-markdown";
import rehypeRaw from "rehype-raw";
import remarkGfm from "remark-gfm";
import Card from "../../components/Card";
import "github-markdown-css/github-markdown.css";
import { PiLineSegments, PiUser } from "react-icons/pi";
import ChatImg from "../../assets/no-chat.png";
import StartingImg from "../../assets/starting.png";
import { BiFilterAlt } from "react-icons/bi";
const API_URL = import.meta.env.VITE_API_URL || "";

interface Persona {
  id: number;
  name: string;
  data: any;
}

interface SimulationData {
  id: number;
  audience_id: number;
  simulation_response: string;
  optimization_response: string;
  status: string;
  personas: Persona[];
  created_at: string;
  updated_at: string;
  content?: string; // Optional content field that may contain JSON data
}

interface ChatMessage {
  role: string;
  content: string;
  timestamp: string;
}

interface SimulationResultsContentProps {
  simulationId: string | number;
  onError?: (error: string) => void;
  setIsSidebarVisible: (visible: boolean) => void;
  isSidebarVisible: string;
}

const SimulationResultsContent: React.FC<SimulationResultsContentProps> = ({
  simulationId,
  onError,
  setIsSidebarVisible,
  isSidebarVisible,
}) => {
  const { state } = useLocation();
  const [simulation, setSimulation] = useState<SimulationData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<"simulation" | "advanced">(
    "simulation"
  );
  const [chatTab, setChatTab] = useState<"simulation" | "persona">(
    "simulation"
  );
  const [selectedPersona, setSelectedPersona] = useState<number | null>(null);
  const [chatHistory, setChatHistory] = useState<ChatMessage[]>([]);
  const [chatMessage, setChatMessage] = useState("");
  const [sendingMessage, setSendingMessage] = useState(false);
  const [pollingInterval, setPollingInterval] = useState<NodeJS.Timeout | null>(
    null
  );
  const [simulationStatus, setSimulationStatus] = useState<
    "pending" | "running" | "completed" | "partial"
  >("pending");
  const [optimizationStatus, setOptimizationStatus] = useState<
    "pending" | "running" | "completed"
  >("pending");
  const [currentStep, setCurrentStep] = useState<string>(
    "Initializing simulation..."
  );
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [showTooltip, setShowTooltip] = useState(false);
  const [activeChatTab, setActiveChatTab] = useState("simulation");
  // State for collapsible cards in content summary
  const [expandedCards, setExpandedCards] = useState<Record<string, boolean>>({
    details: true,
    audience: false,
    additional: false,
    personas: false,
  });
  useEffect(() => {
    if (isSidebarVisible === "chat") {
      setActiveChatTab("simulation");
    }
  }, [isSidebarVisible]);
  const [sliderStyle, setSliderStyle] = useState({});
  const chatRef = useRef(null);
  const simulationRef = useRef(null);

  useEffect(() => {
    const el =
      activeChatTab === "chat" ? chatRef.current : simulationRef.current;
    if (el) {
      setSliderStyle({
        width: `${el.offsetWidth}px`,
        transform: `translateX(${el.offsetLeft}px)`,
      });
    }
  }, [activeChatTab]);
  // State for dropdown
  const [isDetailsDropdownOpen, setIsDetailsDropdownOpen] = useState(false);

  // Function to toggle expanded/collapsed state of cards
  const toggleCard = (cardName: string) => {
    setExpandedCards((prev) => ({
      ...prev,
      [cardName]: !prev[cardName],
    }));
  };

  // Refs for scrolling and input focus
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  useEffect(() => {
    // Reset state when simulationId changes
    setSimulation(null);
    setLoading(true);
    setError(null);
    setChatHistory([]);
    setSelectedPersona(null);
    setActiveTab("simulation");
    setChatTab("simulation");

    if (!simulationId) {
      const errorMsg = "No simulation ID provided";
      setError(errorMsg);
      if (onError) onError(errorMsg);
      setLoading(false);
      return;
    }

    // Clear any existing interval first to avoid multiple intervals
    if (pollingInterval) {
      clearInterval(pollingInterval);
      setPollingInterval(null);
    }

    // Initial fetch - let's determine if we need to start polling
    fetchSimulationStatus(true);

    // Clean up interval on component unmount
    return () => {
      if (pollingInterval) clearInterval(pollingInterval);
    };
  }, [simulationId]); // Only depend on simulationId, not on simulation data

  // Auto-scroll chat to bottom when messages change
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop =
        chatContainerRef.current.scrollHeight;
    }
  }, [chatHistory]);

  const fetchSimulationStatus = async (initialFetch = false) => {
    if (!simulationId) return;

    try {
      const response = await fetch(`${API_URL}/simulations/${simulationId}`, {
        credentials: "include",
      });

      if (!response.ok) {
        throw new Error("Failed to fetch simulation status");
      }

      const data = await response.json();
      setSimulation(data);

      // If simulation_response is available, show partial results
      if (data.simulation_response) {
        // Check if optimization_response is empty or just spaces
        const hasOptimizationResponse =
          data.optimization_response &&
          data.optimization_response.trim() !== "";

        if (hasOptimizationResponse) {
          // Both responses are ready
          setSimulationStatus("completed");
          setOptimizationStatus("completed");
          setLoading(false);
          // Clear the polling interval when both responses are received
          if (pollingInterval) {
            clearInterval(pollingInterval);
            setPollingInterval(null);
          }
        } else {
          // Only simulation_response is ready, optimization still in progress or not needed
          setSimulationStatus("partial");
          setOptimizationStatus("running");
          setLoading(false);

          // If num_tabs is 1, don't poll for optimization response
          if (data.num_tabs === 1) {
            if (pollingInterval) {
              clearInterval(pollingInterval);
              setPollingInterval(null);
            }
          } else if (initialFetch) {
            // Only continue polling for optimization if num_tabs > 1
            // Clear any existing interval first
            if (pollingInterval) {
              clearInterval(pollingInterval);
            }
            const interval = setInterval(() => fetchSimulationStatus(), 30000);
            setPollingInterval(interval);
            console.log("Polling started for optimization status...");
          }
        }
      } else {
        // Simulation is still running
        setSimulationStatus("running");
        setOptimizationStatus("pending");
        setCurrentStep(getSimulationStep(data.status));

        // Only start polling if this is the initial fetch and we need to poll
        if (initialFetch) {
          // Clear any existing interval first
          if (pollingInterval) {
            clearInterval(pollingInterval);
          }
          // Start polling for simulation status
          const interval = setInterval(() => fetchSimulationStatus(), 30000);
          setPollingInterval(interval);
          console.log("Polling started for simulation status...");
        }
      }
    } catch (err) {
      console.error("Error fetching simulation status:", err);
      setError("Failed to load simulation status. Please try again.");
      setLoading(false);
      if (pollingInterval) {
        clearInterval(pollingInterval);
        setPollingInterval(null);
      }
    }
  };
  const DownloadIcon = ({ className = "" }) => (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M22.5 12.75V18.75C22.5 19.1478 22.342 19.5294 22.0607 19.8107C21.7794 20.092 21.3978 20.25 21 20.25H3C2.60218 20.25 2.22064 20.092 1.93934 19.8107C1.65804 19.5294 1.5 19.1478 1.5 18.75V12.75C1.5 12.3522 1.65804 11.9706 1.93934 11.6893C2.22064 11.408 2.60218 11.25 3 11.25H6.75C6.94891 11.25 7.13968 11.329 7.28033 11.4697C7.42098 11.6103 7.5 11.8011 7.5 12C7.5 12.1989 7.42098 12.3897 7.28033 12.5303C7.13968 12.671 6.94891 12.75 6.75 12.75H3V18.75H21V12.75H17.25C17.0511 12.75 16.8603 12.671 16.7197 12.5303C16.579 12.3897 16.5 12.1989 16.5 12C16.5 11.8011 16.579 11.6103 16.7197 11.4697C16.8603 11.329 17.0511 11.25 17.25 11.25H21C21.3978 11.25 21.7794 11.408 22.0607 11.6893C22.342 11.9706 22.5 12.3522 22.5 12.75ZM11.4694 12.5306C11.539 12.6004 11.6217 12.6557 11.7128 12.6934C11.8038 12.7312 11.9014 12.7506 12 12.7506C12.0986 12.7506 12.1962 12.7312 12.2872 12.6934C12.3783 12.6557 12.461 12.6004 12.5306 12.5306L17.0306 8.03063C17.1714 7.88989 17.2504 7.69902 17.2504 7.5C17.2504 7.30098 17.1714 7.11011 17.0306 6.96937C16.8899 6.82864 16.699 6.74958 16.5 6.74958C16.301 6.74958 16.1101 6.82864 15.9694 6.96937L12.75 10.1897V2.25C12.75 2.05109 12.671 1.86032 12.5303 1.71967C12.3897 1.57902 12.1989 1.5 12 1.5C11.8011 1.5 11.6103 1.57902 11.4697 1.71967C11.329 1.86032 11.25 2.05109 11.25 2.25V10.1897L8.03063 6.96937C7.88989 6.82864 7.69902 6.74958 7.5 6.74958C7.30098 6.74958 7.11011 6.82864 6.96938 6.96938C6.82864 7.11011 6.74958 7.30098 6.74958 7.5C6.74958 7.69902 6.82864 7.88989 6.96937 8.03063L11.4694 12.5306ZM18.75 15.75C18.75 15.5275 18.684 15.31 18.5604 15.125C18.4368 14.94 18.2611 14.7958 18.0555 14.7106C17.85 14.6255 17.6238 14.6032 17.4055 14.6466C17.1873 14.69 16.9868 14.7972 16.8295 14.9545C16.6722 15.1118 16.565 15.3123 16.5216 15.5305C16.4782 15.7488 16.5005 15.975 16.5856 16.1805C16.6708 16.3861 16.815 16.5618 17 16.6854C17.185 16.809 17.4025 16.875 17.625 16.875C17.9234 16.875 18.2095 16.7565 18.4205 16.5455C18.6315 16.3345 18.75 16.0484 18.75 15.75Z"
        fill="black"
      />
      <path
        d="M22.5 12.75V18.75C22.5 19.1478 22.342 19.5294 22.0607 19.8107C21.7794 20.092 21.3978 20.25 21 20.25H3C2.60218 20.25 2.22064 20.092 1.93934 19.8107C1.65804 19.5294 1.5 19.1478 1.5 18.75V12.75C1.5 12.3522 1.65804 11.9706 1.93934 11.6893C2.22064 11.408 2.60218 11.25 3 11.25H6.75C6.94891 11.25 7.13968 11.329 7.28033 11.4697C7.42098 11.6103 7.5 11.8011 7.5 12C7.5 12.1989 7.42098 12.3897 7.28033 12.5303C7.13968 12.671 6.94891 12.75 6.75 12.75H3V18.75H21V12.75H17.25C17.0511 12.75 16.8603 12.671 16.7197 12.5303C16.579 12.3897 16.5 12.1989 16.5 12C16.5 11.8011 16.579 11.6103 16.7197 11.4697C16.8603 11.329 17.0511 11.25 17.25 11.25H21C21.3978 11.25 21.7794 11.408 22.0607 11.6893C22.342 11.9706 22.5 12.3522 22.5 12.75ZM11.4694 12.5306C11.539 12.6004 11.6217 12.6557 11.7128 12.6934C11.8038 12.7312 11.9014 12.7506 12 12.7506C12.0986 12.7506 12.1962 12.7312 12.2872 12.6934C12.3783 12.6557 12.461 12.6004 12.5306 12.5306L17.0306 8.03063C17.1714 7.88989 17.2504 7.69902 17.2504 7.5C17.2504 7.30098 17.1714 7.11011 17.0306 6.96937C16.8899 6.82864 16.699 6.74958 16.5 6.74958C16.301 6.74958 16.1101 6.82864 15.9694 6.96937L12.75 10.1897V2.25C12.75 2.05109 12.671 1.86032 12.5303 1.71967C12.3897 1.57902 12.1989 1.5 12 1.5C11.8011 1.5 11.6103 1.57902 11.4697 1.71967C11.329 1.86032 11.25 2.05109 11.25 2.25V10.1897L8.03063 6.96937C7.88989 6.82864 7.69902 6.74958 7.5 6.74958C7.30098 6.74958 7.11011 6.82864 6.96938 6.96938C6.82864 7.11011 6.74958 7.30098 6.74958 7.5C6.74958 7.69902 6.82864 7.88989 6.96937 8.03063L11.4694 12.5306ZM18.75 15.75C18.75 15.5275 18.684 15.31 18.5604 15.125C18.4368 14.94 18.2611 14.7958 18.0555 14.7106C17.85 14.6255 17.6238 14.6032 17.4055 14.6466C17.1873 14.69 16.9868 14.7972 16.8295 14.9545C16.6722 15.1118 16.565 15.3123 16.5216 15.5305C16.4782 15.7488 16.5005 15.975 16.5856 16.1805C16.6708 16.3861 16.815 16.5618 17 16.6854C17.185 16.809 17.4025 16.875 17.625 16.875C17.9234 16.875 18.2095 16.7565 18.4205 16.5455C18.6315 16.3345 18.75 16.0484 18.75 15.75Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M22.5 12.75V18.75C22.5 19.1478 22.342 19.5294 22.0607 19.8107C21.7794 20.092 21.3978 20.25 21 20.25H3C2.60218 20.25 2.22064 20.092 1.93934 19.8107C1.65804 19.5294 1.5 19.1478 1.5 18.75V12.75C1.5 12.3522 1.65804 11.9706 1.93934 11.6893C2.22064 11.408 2.60218 11.25 3 11.25H6.75C6.94891 11.25 7.13968 11.329 7.28033 11.4697C7.42098 11.6103 7.5 11.8011 7.5 12C7.5 12.1989 7.42098 12.3897 7.28033 12.5303C7.13968 12.671 6.94891 12.75 6.75 12.75H3V18.75H21V12.75H17.25C17.0511 12.75 16.8603 12.671 16.7197 12.5303C16.579 12.3897 16.5 12.1989 16.5 12C16.5 11.8011 16.579 11.6103 16.7197 11.4697C16.8603 11.329 17.0511 11.25 17.25 11.25H21C21.3978 11.25 21.7794 11.408 22.0607 11.6893C22.342 11.9706 22.5 12.3522 22.5 12.75ZM11.4694 12.5306C11.539 12.6004 11.6217 12.6557 11.7128 12.6934C11.8038 12.7312 11.9014 12.7506 12 12.7506C12.0986 12.7506 12.1962 12.7312 12.2872 12.6934C12.3783 12.6557 12.461 12.6004 12.5306 12.5306L17.0306 8.03063C17.1714 7.88989 17.2504 7.69902 17.2504 7.5C17.2504 7.30098 17.1714 7.11011 17.0306 6.96937C16.8899 6.82864 16.699 6.74958 16.5 6.74958C16.301 6.74958 16.1101 6.82864 15.9694 6.96937L12.75 10.1897V2.25C12.75 2.05109 12.671 1.86032 12.5303 1.71967C12.3897 1.57902 12.1989 1.5 12 1.5C11.8011 1.5 11.6103 1.57902 11.4697 1.71967C11.329 1.86032 11.25 2.05109 11.25 2.25V10.1897L8.03063 6.96937C7.88989 6.82864 7.69902 6.74958 7.5 6.74958C7.30098 6.74958 7.11011 6.82864 6.96938 6.96938C6.82864 7.11011 6.74958 7.30098 6.74958 7.5C6.74958 7.69902 6.82864 7.88989 6.96937 8.03063L11.4694 12.5306ZM18.75 15.75C18.75 15.5275 18.684 15.31 18.5604 15.125C18.4368 14.94 18.2611 14.7958 18.0555 14.7106C17.85 14.6255 17.6238 14.6032 17.4055 14.6466C17.1873 14.69 16.9868 14.7972 16.8295 14.9545C16.6722 15.1118 16.565 15.3123 16.5216 15.5305C16.4782 15.7488 16.5005 15.975 16.5856 16.1805C16.6708 16.3861 16.815 16.5618 17 16.6854C17.185 16.809 17.4025 16.875 17.625 16.875C17.9234 16.875 18.2095 16.7565 18.4205 16.5455C18.6315 16.3345 18.75 16.0484 18.75 15.75Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M22.5 12.75V18.75C22.5 19.1478 22.342 19.5294 22.0607 19.8107C21.7794 20.092 21.3978 20.25 21 20.25H3C2.60218 20.25 2.22064 20.092 1.93934 19.8107C1.65804 19.5294 1.5 19.1478 1.5 18.75V12.75C1.5 12.3522 1.65804 11.9706 1.93934 11.6893C2.22064 11.408 2.60218 11.25 3 11.25H6.75C6.94891 11.25 7.13968 11.329 7.28033 11.4697C7.42098 11.6103 7.5 11.8011 7.5 12C7.5 12.1989 7.42098 12.3897 7.28033 12.5303C7.13968 12.671 6.94891 12.75 6.75 12.75H3V18.75H21V12.75H17.25C17.0511 12.75 16.8603 12.671 16.7197 12.5303C16.579 12.3897 16.5 12.1989 16.5 12C16.5 11.8011 16.579 11.6103 16.7197 11.4697C16.8603 11.329 17.0511 11.25 17.25 11.25H21C21.3978 11.25 21.7794 11.408 22.0607 11.6893C22.342 11.9706 22.5 12.3522 22.5 12.75ZM11.4694 12.5306C11.539 12.6004 11.6217 12.6557 11.7128 12.6934C11.8038 12.7312 11.9014 12.7506 12 12.7506C12.0986 12.7506 12.1962 12.7312 12.2872 12.6934C12.3783 12.6557 12.461 12.6004 12.5306 12.5306L17.0306 8.03063C17.1714 7.88989 17.2504 7.69902 17.2504 7.5C17.2504 7.30098 17.1714 7.11011 17.0306 6.96937C16.8899 6.82864 16.699 6.74958 16.5 6.74958C16.301 6.74958 16.1101 6.82864 15.9694 6.96937L12.75 10.1897V2.25C12.75 2.05109 12.671 1.86032 12.5303 1.71967C12.3897 1.57902 12.1989 1.5 12 1.5C11.8011 1.5 11.6103 1.57902 11.4697 1.71967C11.329 1.86032 11.25 2.05109 11.25 2.25V10.1897L8.03063 6.96937C7.88989 6.82864 7.69902 6.74958 7.5 6.74958C7.30098 6.74958 7.11011 6.82864 6.96938 6.96938C6.82864 7.11011 6.74958 7.30098 6.74958 7.5C6.74958 7.69902 6.82864 7.88989 6.96937 8.03063L11.4694 12.5306ZM18.75 15.75C18.75 15.5275 18.684 15.31 18.5604 15.125C18.4368 14.94 18.2611 14.7958 18.0555 14.7106C17.85 14.6255 17.6238 14.6032 17.4055 14.6466C17.1873 14.69 16.9868 14.7972 16.8295 14.9545C16.6722 15.1118 16.565 15.3123 16.5216 15.5305C16.4782 15.7488 16.5005 15.975 16.5856 16.1805C16.6708 16.3861 16.815 16.5618 17 16.6854C17.185 16.809 17.4025 16.875 17.625 16.875C17.9234 16.875 18.2095 16.7565 18.4205 16.5455C18.6315 16.3345 18.75 16.0484 18.75 15.75Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M22.5 12.75V18.75C22.5 19.1478 22.342 19.5294 22.0607 19.8107C21.7794 20.092 21.3978 20.25 21 20.25H3C2.60218 20.25 2.22064 20.092 1.93934 19.8107C1.65804 19.5294 1.5 19.1478 1.5 18.75V12.75C1.5 12.3522 1.65804 11.9706 1.93934 11.6893C2.22064 11.408 2.60218 11.25 3 11.25H6.75C6.94891 11.25 7.13968 11.329 7.28033 11.4697C7.42098 11.6103 7.5 11.8011 7.5 12C7.5 12.1989 7.42098 12.3897 7.28033 12.5303C7.13968 12.671 6.94891 12.75 6.75 12.75H3V18.75H21V12.75H17.25C17.0511 12.75 16.8603 12.671 16.7197 12.5303C16.579 12.3897 16.5 12.1989 16.5 12C16.5 11.8011 16.579 11.6103 16.7197 11.4697C16.8603 11.329 17.0511 11.25 17.25 11.25H21C21.3978 11.25 21.7794 11.408 22.0607 11.6893C22.342 11.9706 22.5 12.3522 22.5 12.75ZM11.4694 12.5306C11.539 12.6004 11.6217 12.6557 11.7128 12.6934C11.8038 12.7312 11.9014 12.7506 12 12.7506C12.0986 12.7506 12.1962 12.7312 12.2872 12.6934C12.3783 12.6557 12.461 12.6004 12.5306 12.5306L17.0306 8.03063C17.1714 7.88989 17.2504 7.69902 17.2504 7.5C17.2504 7.30098 17.1714 7.11011 17.0306 6.96937C16.8899 6.82864 16.699 6.74958 16.5 6.74958C16.301 6.74958 16.1101 6.82864 15.9694 6.96937L12.75 10.1897V2.25C12.75 2.05109 12.671 1.86032 12.5303 1.71967C12.3897 1.57902 12.1989 1.5 12 1.5C11.8011 1.5 11.6103 1.57902 11.4697 1.71967C11.329 1.86032 11.25 2.05109 11.25 2.25V10.1897L8.03063 6.96937C7.88989 6.82864 7.69902 6.74958 7.5 6.74958C7.30098 6.74958 7.11011 6.82864 6.96938 6.96938C6.82864 7.11011 6.74958 7.30098 6.74958 7.5C6.74958 7.69902 6.82864 7.88989 6.96937 8.03063L11.4694 12.5306ZM18.75 15.75C18.75 15.5275 18.684 15.31 18.5604 15.125C18.4368 14.94 18.2611 14.7958 18.0555 14.7106C17.85 14.6255 17.6238 14.6032 17.4055 14.6466C17.1873 14.69 16.9868 14.7972 16.8295 14.9545C16.6722 15.1118 16.565 15.3123 16.5216 15.5305C16.4782 15.7488 16.5005 15.975 16.5856 16.1805C16.6708 16.3861 16.815 16.5618 17 16.6854C17.185 16.809 17.4025 16.875 17.625 16.875C17.9234 16.875 18.2095 16.7565 18.4205 16.5455C18.6315 16.3345 18.75 16.0484 18.75 15.75Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M22.5 12.75V18.75C22.5 19.1478 22.342 19.5294 22.0607 19.8107C21.7794 20.092 21.3978 20.25 21 20.25H3C2.60218 20.25 2.22064 20.092 1.93934 19.8107C1.65804 19.5294 1.5 19.1478 1.5 18.75V12.75C1.5 12.3522 1.65804 11.9706 1.93934 11.6893C2.22064 11.408 2.60218 11.25 3 11.25H6.75C6.94891 11.25 7.13968 11.329 7.28033 11.4697C7.42098 11.6103 7.5 11.8011 7.5 12C7.5 12.1989 7.42098 12.3897 7.28033 12.5303C7.13968 12.671 6.94891 12.75 6.75 12.75H3V18.75H21V12.75H17.25C17.0511 12.75 16.8603 12.671 16.7197 12.5303C16.579 12.3897 16.5 12.1989 16.5 12C16.5 11.8011 16.579 11.6103 16.7197 11.4697C16.8603 11.329 17.0511 11.25 17.25 11.25H21C21.3978 11.25 21.7794 11.408 22.0607 11.6893C22.342 11.9706 22.5 12.3522 22.5 12.75ZM11.4694 12.5306C11.539 12.6004 11.6217 12.6557 11.7128 12.6934C11.8038 12.7312 11.9014 12.7506 12 12.7506C12.0986 12.7506 12.1962 12.7312 12.2872 12.6934C12.3783 12.6557 12.461 12.6004 12.5306 12.5306L17.0306 8.03063C17.1714 7.88989 17.2504 7.69902 17.2504 7.5C17.2504 7.30098 17.1714 7.11011 17.0306 6.96937C16.8899 6.82864 16.699 6.74958 16.5 6.74958C16.301 6.74958 16.1101 6.82864 15.9694 6.96937L12.75 10.1897V2.25C12.75 2.05109 12.671 1.86032 12.5303 1.71967C12.3897 1.57902 12.1989 1.5 12 1.5C11.8011 1.5 11.6103 1.57902 11.4697 1.71967C11.329 1.86032 11.25 2.05109 11.25 2.25V10.1897L8.03063 6.96937C7.88989 6.82864 7.69902 6.74958 7.5 6.74958C7.30098 6.74958 7.11011 6.82864 6.96938 6.96938C6.82864 7.11011 6.74958 7.30098 6.74958 7.5C6.74958 7.69902 6.82864 7.88989 6.96937 8.03063L11.4694 12.5306ZM18.75 15.75C18.75 15.5275 18.684 15.31 18.5604 15.125C18.4368 14.94 18.2611 14.7958 18.0555 14.7106C17.85 14.6255 17.6238 14.6032 17.4055 14.6466C17.1873 14.69 16.9868 14.7972 16.8295 14.9545C16.6722 15.1118 16.565 15.3123 16.5216 15.5305C16.4782 15.7488 16.5005 15.975 16.5856 16.1805C16.6708 16.3861 16.815 16.5618 17 16.6854C17.185 16.809 17.4025 16.875 17.625 16.875C17.9234 16.875 18.2095 16.7565 18.4205 16.5455C18.6315 16.3345 18.75 16.0484 18.75 15.75Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M22.5 12.75V18.75C22.5 19.1478 22.342 19.5294 22.0607 19.8107C21.7794 20.092 21.3978 20.25 21 20.25H3C2.60218 20.25 2.22064 20.092 1.93934 19.8107C1.65804 19.5294 1.5 19.1478 1.5 18.75V12.75C1.5 12.3522 1.65804 11.9706 1.93934 11.6893C2.22064 11.408 2.60218 11.25 3 11.25H6.75C6.94891 11.25 7.13968 11.329 7.28033 11.4697C7.42098 11.6103 7.5 11.8011 7.5 12C7.5 12.1989 7.42098 12.3897 7.28033 12.5303C7.13968 12.671 6.94891 12.75 6.75 12.75H3V18.75H21V12.75H17.25C17.0511 12.75 16.8603 12.671 16.7197 12.5303C16.579 12.3897 16.5 12.1989 16.5 12C16.5 11.8011 16.579 11.6103 16.7197 11.4697C16.8603 11.329 17.0511 11.25 17.25 11.25H21C21.3978 11.25 21.7794 11.408 22.0607 11.6893C22.342 11.9706 22.5 12.3522 22.5 12.75ZM11.4694 12.5306C11.539 12.6004 11.6217 12.6557 11.7128 12.6934C11.8038 12.7312 11.9014 12.7506 12 12.7506C12.0986 12.7506 12.1962 12.7312 12.2872 12.6934C12.3783 12.6557 12.461 12.6004 12.5306 12.5306L17.0306 8.03063C17.1714 7.88989 17.2504 7.69902 17.2504 7.5C17.2504 7.30098 17.1714 7.11011 17.0306 6.96937C16.8899 6.82864 16.699 6.74958 16.5 6.74958C16.301 6.74958 16.1101 6.82864 15.9694 6.96937L12.75 10.1897V2.25C12.75 2.05109 12.671 1.86032 12.5303 1.71967C12.3897 1.57902 12.1989 1.5 12 1.5C11.8011 1.5 11.6103 1.57902 11.4697 1.71967C11.329 1.86032 11.25 2.05109 11.25 2.25V10.1897L8.03063 6.96937C7.88989 6.82864 7.69902 6.74958 7.5 6.74958C7.30098 6.74958 7.11011 6.82864 6.96938 6.96938C6.82864 7.11011 6.74958 7.30098 6.74958 7.5C6.74958 7.69902 6.82864 7.88989 6.96937 8.03063L11.4694 12.5306ZM18.75 15.75C18.75 15.5275 18.684 15.31 18.5604 15.125C18.4368 14.94 18.2611 14.7958 18.0555 14.7106C17.85 14.6255 17.6238 14.6032 17.4055 14.6466C17.1873 14.69 16.9868 14.7972 16.8295 14.9545C16.6722 15.1118 16.565 15.3123 16.5216 15.5305C16.4782 15.7488 16.5005 15.975 16.5856 16.1805C16.6708 16.3861 16.815 16.5618 17 16.6854C17.185 16.809 17.4025 16.875 17.625 16.875C17.9234 16.875 18.2095 16.7565 18.4205 16.5455C18.6315 16.3345 18.75 16.0484 18.75 15.75Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M22.5 12.75V18.75C22.5 19.1478 22.342 19.5294 22.0607 19.8107C21.7794 20.092 21.3978 20.25 21 20.25H3C2.60218 20.25 2.22064 20.092 1.93934 19.8107C1.65804 19.5294 1.5 19.1478 1.5 18.75V12.75C1.5 12.3522 1.65804 11.9706 1.93934 11.6893C2.22064 11.408 2.60218 11.25 3 11.25H6.75C6.94891 11.25 7.13968 11.329 7.28033 11.4697C7.42098 11.6103 7.5 11.8011 7.5 12C7.5 12.1989 7.42098 12.3897 7.28033 12.5303C7.13968 12.671 6.94891 12.75 6.75 12.75H3V18.75H21V12.75H17.25C17.0511 12.75 16.8603 12.671 16.7197 12.5303C16.579 12.3897 16.5 12.1989 16.5 12C16.5 11.8011 16.579 11.6103 16.7197 11.4697C16.8603 11.329 17.0511 11.25 17.25 11.25H21C21.3978 11.25 21.7794 11.408 22.0607 11.6893C22.342 11.9706 22.5 12.3522 22.5 12.75ZM11.4694 12.5306C11.539 12.6004 11.6217 12.6557 11.7128 12.6934C11.8038 12.7312 11.9014 12.7506 12 12.7506C12.0986 12.7506 12.1962 12.7312 12.2872 12.6934C12.3783 12.6557 12.461 12.6004 12.5306 12.5306L17.0306 8.03063C17.1714 7.88989 17.2504 7.69902 17.2504 7.5C17.2504 7.30098 17.1714 7.11011 17.0306 6.96937C16.8899 6.82864 16.699 6.74958 16.5 6.74958C16.301 6.74958 16.1101 6.82864 15.9694 6.96937L12.75 10.1897V2.25C12.75 2.05109 12.671 1.86032 12.5303 1.71967C12.3897 1.57902 12.1989 1.5 12 1.5C11.8011 1.5 11.6103 1.57902 11.4697 1.71967C11.329 1.86032 11.25 2.05109 11.25 2.25V10.1897L8.03063 6.96937C7.88989 6.82864 7.69902 6.74958 7.5 6.74958C7.30098 6.74958 7.11011 6.82864 6.96938 6.96938C6.82864 7.11011 6.74958 7.30098 6.74958 7.5C6.74958 7.69902 6.82864 7.88989 6.96937 8.03063L11.4694 12.5306ZM18.75 15.75C18.75 15.5275 18.684 15.31 18.5604 15.125C18.4368 14.94 18.2611 14.7958 18.0555 14.7106C17.85 14.6255 17.6238 14.6032 17.4055 14.6466C17.1873 14.69 16.9868 14.7972 16.8295 14.9545C16.6722 15.1118 16.565 15.3123 16.5216 15.5305C16.4782 15.7488 16.5005 15.975 16.5856 16.1805C16.6708 16.3861 16.815 16.5618 17 16.6854C17.185 16.809 17.4025 16.875 17.625 16.875C17.9234 16.875 18.2095 16.7565 18.4205 16.5455C18.6315 16.3345 18.75 16.0484 18.75 15.75Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M22.5 12.75V18.75C22.5 19.1478 22.342 19.5294 22.0607 19.8107C21.7794 20.092 21.3978 20.25 21 20.25H3C2.60218 20.25 2.22064 20.092 1.93934 19.8107C1.65804 19.5294 1.5 19.1478 1.5 18.75V12.75C1.5 12.3522 1.65804 11.9706 1.93934 11.6893C2.22064 11.408 2.60218 11.25 3 11.25H6.75C6.94891 11.25 7.13968 11.329 7.28033 11.4697C7.42098 11.6103 7.5 11.8011 7.5 12C7.5 12.1989 7.42098 12.3897 7.28033 12.5303C7.13968 12.671 6.94891 12.75 6.75 12.75H3V18.75H21V12.75H17.25C17.0511 12.75 16.8603 12.671 16.7197 12.5303C16.579 12.3897 16.5 12.1989 16.5 12C16.5 11.8011 16.579 11.6103 16.7197 11.4697C16.8603 11.329 17.0511 11.25 17.25 11.25H21C21.3978 11.25 21.7794 11.408 22.0607 11.6893C22.342 11.9706 22.5 12.3522 22.5 12.75ZM11.4694 12.5306C11.539 12.6004 11.6217 12.6557 11.7128 12.6934C11.8038 12.7312 11.9014 12.7506 12 12.7506C12.0986 12.7506 12.1962 12.7312 12.2872 12.6934C12.3783 12.6557 12.461 12.6004 12.5306 12.5306L17.0306 8.03063C17.1714 7.88989 17.2504 7.69902 17.2504 7.5C17.2504 7.30098 17.1714 7.11011 17.0306 6.96937C16.8899 6.82864 16.699 6.74958 16.5 6.74958C16.301 6.74958 16.1101 6.82864 15.9694 6.96937L12.75 10.1897V2.25C12.75 2.05109 12.671 1.86032 12.5303 1.71967C12.3897 1.57902 12.1989 1.5 12 1.5C11.8011 1.5 11.6103 1.57902 11.4697 1.71967C11.329 1.86032 11.25 2.05109 11.25 2.25V10.1897L8.03063 6.96937C7.88989 6.82864 7.69902 6.74958 7.5 6.74958C7.30098 6.74958 7.11011 6.82864 6.96938 6.96938C6.82864 7.11011 6.74958 7.30098 6.74958 7.5C6.74958 7.69902 6.82864 7.88989 6.96937 8.03063L11.4694 12.5306ZM18.75 15.75C18.75 15.5275 18.684 15.31 18.5604 15.125C18.4368 14.94 18.2611 14.7958 18.0555 14.7106C17.85 14.6255 17.6238 14.6032 17.4055 14.6466C17.1873 14.69 16.9868 14.7972 16.8295 14.9545C16.6722 15.1118 16.565 15.3123 16.5216 15.5305C16.4782 15.7488 16.5005 15.975 16.5856 16.1805C16.6708 16.3861 16.815 16.5618 17 16.6854C17.185 16.809 17.4025 16.875 17.625 16.875C17.9234 16.875 18.2095 16.7565 18.4205 16.5455C18.6315 16.3345 18.75 16.0484 18.75 15.75Z"
        fill="black"
        fillOpacity="0.2"
      />
    </svg>
  );
  const CheckIcon = ({ className = "" }) => (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M22 11.1V6.9C22 3.4 20.6 2 17.1 2H12.9C9.4 2 8 3.4 8 6.9V8H11.1C14.6 8 16 9.4 16 12.9V16H17.1C20.6 16 22 14.6 22 11.1Z"
        stroke="black"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M22 11.1V6.9C22 3.4 20.6 2 17.1 2H12.9C9.4 2 8 3.4 8 6.9V8H11.1C14.6 8 16 9.4 16 12.9V16H17.1C20.6 16 22 14.6 22 11.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M22 11.1V6.9C22 3.4 20.6 2 17.1 2H12.9C9.4 2 8 3.4 8 6.9V8H11.1C14.6 8 16 9.4 16 12.9V16H17.1C20.6 16 22 14.6 22 11.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M22 11.1V6.9C22 3.4 20.6 2 17.1 2H12.9C9.4 2 8 3.4 8 6.9V8H11.1C14.6 8 16 9.4 16 12.9V16H17.1C20.6 16 22 14.6 22 11.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M22 11.1V6.9C22 3.4 20.6 2 17.1 2H12.9C9.4 2 8 3.4 8 6.9V8H11.1C14.6 8 16 9.4 16 12.9V16H17.1C20.6 16 22 14.6 22 11.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M22 11.1V6.9C22 3.4 20.6 2 17.1 2H12.9C9.4 2 8 3.4 8 6.9V8H11.1C14.6 8 16 9.4 16 12.9V16H17.1C20.6 16 22 14.6 22 11.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M22 11.1V6.9C22 3.4 20.6 2 17.1 2H12.9C9.4 2 8 3.4 8 6.9V8H11.1C14.6 8 16 9.4 16 12.9V16H17.1C20.6 16 22 14.6 22 11.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M22 11.1V6.9C22 3.4 20.6 2 17.1 2H12.9C9.4 2 8 3.4 8 6.9V8H11.1C14.6 8 16 9.4 16 12.9V16H17.1C20.6 16 22 14.6 22 11.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M22 11.1V6.9C22 3.4 20.6 2 17.1 2H12.9C9.4 2 8 3.4 8 6.9V8H11.1C14.6 8 16 9.4 16 12.9V16H17.1C20.6 16 22 14.6 22 11.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M16 17.1V12.9C16 9.4 14.6 8 11.1 8H6.9C3.4 8 2 9.4 2 12.9V17.1C2 20.6 3.4 22 6.9 22H11.1C14.6 22 16 20.6 16 17.1Z"
        stroke="black"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M16 17.1V12.9C16 9.4 14.6 8 11.1 8H6.9C3.4 8 2 9.4 2 12.9V17.1C2 20.6 3.4 22 6.9 22H11.1C14.6 22 16 20.6 16 17.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M16 17.1V12.9C16 9.4 14.6 8 11.1 8H6.9C3.4 8 2 9.4 2 12.9V17.1C2 20.6 3.4 22 6.9 22H11.1C14.6 22 16 20.6 16 17.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M16 17.1V12.9C16 9.4 14.6 8 11.1 8H6.9C3.4 8 2 9.4 2 12.9V17.1C2 20.6 3.4 22 6.9 22H11.1C14.6 22 16 20.6 16 17.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M16 17.1V12.9C16 9.4 14.6 8 11.1 8H6.9C3.4 8 2 9.4 2 12.9V17.1C2 20.6 3.4 22 6.9 22H11.1C14.6 22 16 20.6 16 17.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M16 17.1V12.9C16 9.4 14.6 8 11.1 8H6.9C3.4 8 2 9.4 2 12.9V17.1C2 20.6 3.4 22 6.9 22H11.1C14.6 22 16 20.6 16 17.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M16 17.1V12.9C16 9.4 14.6 8 11.1 8H6.9C3.4 8 2 9.4 2 12.9V17.1C2 20.6 3.4 22 6.9 22H11.1C14.6 22 16 20.6 16 17.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M16 17.1V12.9C16 9.4 14.6 8 11.1 8H6.9C3.4 8 2 9.4 2 12.9V17.1C2 20.6 3.4 22 6.9 22H11.1C14.6 22 16 20.6 16 17.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M16 17.1V12.9C16 9.4 14.6 8 11.1 8H6.9C3.4 8 2 9.4 2 12.9V17.1C2 20.6 3.4 22 6.9 22H11.1C14.6 22 16 20.6 16 17.1Z"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.08008 15L8.03008 16.95L11.9201 13.05"
        stroke="black"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.08008 15L8.03008 16.95L11.9201 13.05"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.08008 15L8.03008 16.95L11.9201 13.05"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.08008 15L8.03008 16.95L11.9201 13.05"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.08008 15L8.03008 16.95L11.9201 13.05"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.08008 15L8.03008 16.95L11.9201 13.05"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.08008 15L8.03008 16.95L11.9201 13.05"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.08008 15L8.03008 16.95L11.9201 13.05"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.08008 15L8.03008 16.95L11.9201 13.05"
        stroke="black"
        strokeOpacity="0.2"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );

  const RotateIcon = ({ className = "" }) => (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M21 4.50001V9.00001C21 9.19892 20.921 9.38969 20.7803 9.53034C20.6397 9.67099 20.4489 9.75001 20.25 9.75001H15.75C15.5511 9.75001 15.3603 9.67099 15.2197 9.53034C15.079 9.38969 15 9.19892 15 9.00001C15 8.8011 15.079 8.61033 15.2197 8.46968C15.3603 8.32903 15.5511 8.25001 15.75 8.25001H18.4397L17.0681 6.87845C15.6742 5.4782 13.7817 4.68821 11.8059 4.68188H11.7638C9.80454 4.67729 7.92227 5.44414 6.52406 6.81657C6.38083 6.95028 6.19096 7.02262 5.99507 7.01813C5.79918 7.01364 5.61283 6.93266 5.47588 6.79253C5.33893 6.65239 5.26226 6.46423 5.26227 6.26829C5.26228 6.07235 5.33897 5.88419 5.47594 5.74407C7.1705 4.08788 9.44983 3.16677 11.8193 3.18064C14.1887 3.1945 16.4571 4.14222 18.1322 5.81813L19.5 7.1897V4.50001C19.5 4.3011 19.579 4.11033 19.7197 3.96968C19.8603 3.82903 20.0511 3.75001 20.25 3.75001C20.4489 3.75001 20.6397 3.82903 20.7803 3.96968C20.921 4.11033 21 4.3011 21 4.50001ZM17.4759 17.1834C16.0639 18.5627 14.1651 19.3298 12.1912 19.3182C10.2173 19.3066 8.32762 18.5173 6.93188 17.1216L5.56031 15.75H8.25C8.44891 15.75 8.63968 15.671 8.78033 15.5303C8.92098 15.3897 9 15.1989 9 15C9 14.8011 8.92098 14.6103 8.78033 14.4697C8.63968 14.329 8.44891 14.25 8.25 14.25H3.75C3.55109 14.25 3.36032 14.329 3.21967 14.4697C3.07902 14.6103 3 14.8011 3 15V19.5C3 19.6989 3.07902 19.8897 3.21967 20.0303C3.36032 20.171 3.55109 20.25 3.75 20.25C3.94891 20.25 4.13968 20.171 4.28033 20.0303C4.42098 19.8897 4.5 19.6989 4.5 19.5V16.8103L5.87156 18.1819C7.54426 19.863 9.816 20.8112 12.1875 20.8181H12.2372C14.5885 20.8242 16.8476 19.9037 18.525 18.2559C18.662 18.1158 18.7387 17.9277 18.7387 17.7317C18.7387 17.5358 18.662 17.3476 18.5251 17.2075C18.3881 17.0674 18.2018 16.9864 18.0059 16.9819C17.81 16.9774 17.6201 17.0497 17.4769 17.1834H17.4759Z"
        fill="black"
      />
      <path
        d="M21 4.50001V9.00001C21 9.19892 20.921 9.38969 20.7803 9.53034C20.6397 9.67099 20.4489 9.75001 20.25 9.75001H15.75C15.5511 9.75001 15.3603 9.67099 15.2197 9.53034C15.079 9.38969 15 9.19892 15 9.00001C15 8.8011 15.079 8.61033 15.2197 8.46968C15.3603 8.32903 15.5511 8.25001 15.75 8.25001H18.4397L17.0681 6.87845C15.6742 5.4782 13.7817 4.68821 11.8059 4.68188H11.7638C9.80454 4.67729 7.92227 5.44414 6.52406 6.81657C6.38083 6.95028 6.19096 7.02262 5.99507 7.01813C5.79918 7.01364 5.61283 6.93266 5.47588 6.79253C5.33893 6.65239 5.26226 6.46423 5.26227 6.26829C5.26228 6.07235 5.33897 5.88419 5.47594 5.74407C7.1705 4.08788 9.44983 3.16677 11.8193 3.18064C14.1887 3.1945 16.4571 4.14222 18.1322 5.81813L19.5 7.1897V4.50001C19.5 4.3011 19.579 4.11033 19.7197 3.96968C19.8603 3.82903 20.0511 3.75001 20.25 3.75001C20.4489 3.75001 20.6397 3.82903 20.7803 3.96968C20.921 4.11033 21 4.3011 21 4.50001ZM17.4759 17.1834C16.0639 18.5627 14.1651 19.3298 12.1912 19.3182C10.2173 19.3066 8.32762 18.5173 6.93188 17.1216L5.56031 15.75H8.25C8.44891 15.75 8.63968 15.671 8.78033 15.5303C8.92098 15.3897 9 15.1989 9 15C9 14.8011 8.92098 14.6103 8.78033 14.4697C8.63968 14.329 8.44891 14.25 8.25 14.25H3.75C3.55109 14.25 3.36032 14.329 3.21967 14.4697C3.07902 14.6103 3 14.8011 3 15V19.5C3 19.6989 3.07902 19.8897 3.21967 20.0303C3.36032 20.171 3.55109 20.25 3.75 20.25C3.94891 20.25 4.13968 20.171 4.28033 20.0303C4.42098 19.8897 4.5 19.6989 4.5 19.5V16.8103L5.87156 18.1819C7.54426 19.863 9.816 20.8112 12.1875 20.8181H12.2372C14.5885 20.8242 16.8476 19.9037 18.525 18.2559C18.662 18.1158 18.7387 17.9277 18.7387 17.7317C18.7387 17.5358 18.662 17.3476 18.5251 17.2075C18.3881 17.0674 18.2018 16.9864 18.0059 16.9819C17.81 16.9774 17.6201 17.0497 17.4769 17.1834H17.4759Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M21 4.50001V9.00001C21 9.19892 20.921 9.38969 20.7803 9.53034C20.6397 9.67099 20.4489 9.75001 20.25 9.75001H15.75C15.5511 9.75001 15.3603 9.67099 15.2197 9.53034C15.079 9.38969 15 9.19892 15 9.00001C15 8.8011 15.079 8.61033 15.2197 8.46968C15.3603 8.32903 15.5511 8.25001 15.75 8.25001H18.4397L17.0681 6.87845C15.6742 5.4782 13.7817 4.68821 11.8059 4.68188H11.7638C9.80454 4.67729 7.92227 5.44414 6.52406 6.81657C6.38083 6.95028 6.19096 7.02262 5.99507 7.01813C5.79918 7.01364 5.61283 6.93266 5.47588 6.79253C5.33893 6.65239 5.26226 6.46423 5.26227 6.26829C5.26228 6.07235 5.33897 5.88419 5.47594 5.74407C7.1705 4.08788 9.44983 3.16677 11.8193 3.18064C14.1887 3.1945 16.4571 4.14222 18.1322 5.81813L19.5 7.1897V4.50001C19.5 4.3011 19.579 4.11033 19.7197 3.96968C19.8603 3.82903 20.0511 3.75001 20.25 3.75001C20.4489 3.75001 20.6397 3.82903 20.7803 3.96968C20.921 4.11033 21 4.3011 21 4.50001ZM17.4759 17.1834C16.0639 18.5627 14.1651 19.3298 12.1912 19.3182C10.2173 19.3066 8.32762 18.5173 6.93188 17.1216L5.56031 15.75H8.25C8.44891 15.75 8.63968 15.671 8.78033 15.5303C8.92098 15.3897 9 15.1989 9 15C9 14.8011 8.92098 14.6103 8.78033 14.4697C8.63968 14.329 8.44891 14.25 8.25 14.25H3.75C3.55109 14.25 3.36032 14.329 3.21967 14.4697C3.07902 14.6103 3 14.8011 3 15V19.5C3 19.6989 3.07902 19.8897 3.21967 20.0303C3.36032 20.171 3.55109 20.25 3.75 20.25C3.94891 20.25 4.13968 20.171 4.28033 20.0303C4.42098 19.8897 4.5 19.6989 4.5 19.5V16.8103L5.87156 18.1819C7.54426 19.863 9.816 20.8112 12.1875 20.8181H12.2372C14.5885 20.8242 16.8476 19.9037 18.525 18.2559C18.662 18.1158 18.7387 17.9277 18.7387 17.7317C18.7387 17.5358 18.662 17.3476 18.5251 17.2075C18.3881 17.0674 18.2018 16.9864 18.0059 16.9819C17.81 16.9774 17.6201 17.0497 17.4769 17.1834H17.4759Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M21 4.50001V9.00001C21 9.19892 20.921 9.38969 20.7803 9.53034C20.6397 9.67099 20.4489 9.75001 20.25 9.75001H15.75C15.5511 9.75001 15.3603 9.67099 15.2197 9.53034C15.079 9.38969 15 9.19892 15 9.00001C15 8.8011 15.079 8.61033 15.2197 8.46968C15.3603 8.32903 15.5511 8.25001 15.75 8.25001H18.4397L17.0681 6.87845C15.6742 5.4782 13.7817 4.68821 11.8059 4.68188H11.7638C9.80454 4.67729 7.92227 5.44414 6.52406 6.81657C6.38083 6.95028 6.19096 7.02262 5.99507 7.01813C5.79918 7.01364 5.61283 6.93266 5.47588 6.79253C5.33893 6.65239 5.26226 6.46423 5.26227 6.26829C5.26228 6.07235 5.33897 5.88419 5.47594 5.74407C7.1705 4.08788 9.44983 3.16677 11.8193 3.18064C14.1887 3.1945 16.4571 4.14222 18.1322 5.81813L19.5 7.1897V4.50001C19.5 4.3011 19.579 4.11033 19.7197 3.96968C19.8603 3.82903 20.0511 3.75001 20.25 3.75001C20.4489 3.75001 20.6397 3.82903 20.7803 3.96968C20.921 4.11033 21 4.3011 21 4.50001ZM17.4759 17.1834C16.0639 18.5627 14.1651 19.3298 12.1912 19.3182C10.2173 19.3066 8.32762 18.5173 6.93188 17.1216L5.56031 15.75H8.25C8.44891 15.75 8.63968 15.671 8.78033 15.5303C8.92098 15.3897 9 15.1989 9 15C9 14.8011 8.92098 14.6103 8.78033 14.4697C8.63968 14.329 8.44891 14.25 8.25 14.25H3.75C3.55109 14.25 3.36032 14.329 3.21967 14.4697C3.07902 14.6103 3 14.8011 3 15V19.5C3 19.6989 3.07902 19.8897 3.21967 20.0303C3.36032 20.171 3.55109 20.25 3.75 20.25C3.94891 20.25 4.13968 20.171 4.28033 20.0303C4.42098 19.8897 4.5 19.6989 4.5 19.5V16.8103L5.87156 18.1819C7.54426 19.863 9.816 20.8112 12.1875 20.8181H12.2372C14.5885 20.8242 16.8476 19.9037 18.525 18.2559C18.662 18.1158 18.7387 17.9277 18.7387 17.7317C18.7387 17.5358 18.662 17.3476 18.5251 17.2075C18.3881 17.0674 18.2018 16.9864 18.0059 16.9819C17.81 16.9774 17.6201 17.0497 17.4769 17.1834H17.4759Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M21 4.50001V9.00001C21 9.19892 20.921 9.38969 20.7803 9.53034C20.6397 9.67099 20.4489 9.75001 20.25 9.75001H15.75C15.5511 9.75001 15.3603 9.67099 15.2197 9.53034C15.079 9.38969 15 9.19892 15 9.00001C15 8.8011 15.079 8.61033 15.2197 8.46968C15.3603 8.32903 15.5511 8.25001 15.75 8.25001H18.4397L17.0681 6.87845C15.6742 5.4782 13.7817 4.68821 11.8059 4.68188H11.7638C9.80454 4.67729 7.92227 5.44414 6.52406 6.81657C6.38083 6.95028 6.19096 7.02262 5.99507 7.01813C5.79918 7.01364 5.61283 6.93266 5.47588 6.79253C5.33893 6.65239 5.26226 6.46423 5.26227 6.26829C5.26228 6.07235 5.33897 5.88419 5.47594 5.74407C7.1705 4.08788 9.44983 3.16677 11.8193 3.18064C14.1887 3.1945 16.4571 4.14222 18.1322 5.81813L19.5 7.1897V4.50001C19.5 4.3011 19.579 4.11033 19.7197 3.96968C19.8603 3.82903 20.0511 3.75001 20.25 3.75001C20.4489 3.75001 20.6397 3.82903 20.7803 3.96968C20.921 4.11033 21 4.3011 21 4.50001ZM17.4759 17.1834C16.0639 18.5627 14.1651 19.3298 12.1912 19.3182C10.2173 19.3066 8.32762 18.5173 6.93188 17.1216L5.56031 15.75H8.25C8.44891 15.75 8.63968 15.671 8.78033 15.5303C8.92098 15.3897 9 15.1989 9 15C9 14.8011 8.92098 14.6103 8.78033 14.4697C8.63968 14.329 8.44891 14.25 8.25 14.25H3.75C3.55109 14.25 3.36032 14.329 3.21967 14.4697C3.07902 14.6103 3 14.8011 3 15V19.5C3 19.6989 3.07902 19.8897 3.21967 20.0303C3.36032 20.171 3.55109 20.25 3.75 20.25C3.94891 20.25 4.13968 20.171 4.28033 20.0303C4.42098 19.8897 4.5 19.6989 4.5 19.5V16.8103L5.87156 18.1819C7.54426 19.863 9.816 20.8112 12.1875 20.8181H12.2372C14.5885 20.8242 16.8476 19.9037 18.525 18.2559C18.662 18.1158 18.7387 17.9277 18.7387 17.7317C18.7387 17.5358 18.662 17.3476 18.5251 17.2075C18.3881 17.0674 18.2018 16.9864 18.0059 16.9819C17.81 16.9774 17.6201 17.0497 17.4769 17.1834H17.4759Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M21 4.50001V9.00001C21 9.19892 20.921 9.38969 20.7803 9.53034C20.6397 9.67099 20.4489 9.75001 20.25 9.75001H15.75C15.5511 9.75001 15.3603 9.67099 15.2197 9.53034C15.079 9.38969 15 9.19892 15 9.00001C15 8.8011 15.079 8.61033 15.2197 8.46968C15.3603 8.32903 15.5511 8.25001 15.75 8.25001H18.4397L17.0681 6.87845C15.6742 5.4782 13.7817 4.68821 11.8059 4.68188H11.7638C9.80454 4.67729 7.92227 5.44414 6.52406 6.81657C6.38083 6.95028 6.19096 7.02262 5.99507 7.01813C5.79918 7.01364 5.61283 6.93266 5.47588 6.79253C5.33893 6.65239 5.26226 6.46423 5.26227 6.26829C5.26228 6.07235 5.33897 5.88419 5.47594 5.74407C7.1705 4.08788 9.44983 3.16677 11.8193 3.18064C14.1887 3.1945 16.4571 4.14222 18.1322 5.81813L19.5 7.1897V4.50001C19.5 4.3011 19.579 4.11033 19.7197 3.96968C19.8603 3.82903 20.0511 3.75001 20.25 3.75001C20.4489 3.75001 20.6397 3.82903 20.7803 3.96968C20.921 4.11033 21 4.3011 21 4.50001ZM17.4759 17.1834C16.0639 18.5627 14.1651 19.3298 12.1912 19.3182C10.2173 19.3066 8.32762 18.5173 6.93188 17.1216L5.56031 15.75H8.25C8.44891 15.75 8.63968 15.671 8.78033 15.5303C8.92098 15.3897 9 15.1989 9 15C9 14.8011 8.92098 14.6103 8.78033 14.4697C8.63968 14.329 8.44891 14.25 8.25 14.25H3.75C3.55109 14.25 3.36032 14.329 3.21967 14.4697C3.07902 14.6103 3 14.8011 3 15V19.5C3 19.6989 3.07902 19.8897 3.21967 20.0303C3.36032 20.171 3.55109 20.25 3.75 20.25C3.94891 20.25 4.13968 20.171 4.28033 20.0303C4.42098 19.8897 4.5 19.6989 4.5 19.5V16.8103L5.87156 18.1819C7.54426 19.863 9.816 20.8112 12.1875 20.8181H12.2372C14.5885 20.8242 16.8476 19.9037 18.525 18.2559C18.662 18.1158 18.7387 17.9277 18.7387 17.7317C18.7387 17.5358 18.662 17.3476 18.5251 17.2075C18.3881 17.0674 18.2018 16.9864 18.0059 16.9819C17.81 16.9774 17.6201 17.0497 17.4769 17.1834H17.4759Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M21 4.50001V9.00001C21 9.19892 20.921 9.38969 20.7803 9.53034C20.6397 9.67099 20.4489 9.75001 20.25 9.75001H15.75C15.5511 9.75001 15.3603 9.67099 15.2197 9.53034C15.079 9.38969 15 9.19892 15 9.00001C15 8.8011 15.079 8.61033 15.2197 8.46968C15.3603 8.32903 15.5511 8.25001 15.75 8.25001H18.4397L17.0681 6.87845C15.6742 5.4782 13.7817 4.68821 11.8059 4.68188H11.7638C9.80454 4.67729 7.92227 5.44414 6.52406 6.81657C6.38083 6.95028 6.19096 7.02262 5.99507 7.01813C5.79918 7.01364 5.61283 6.93266 5.47588 6.79253C5.33893 6.65239 5.26226 6.46423 5.26227 6.26829C5.26228 6.07235 5.33897 5.88419 5.47594 5.74407C7.1705 4.08788 9.44983 3.16677 11.8193 3.18064C14.1887 3.1945 16.4571 4.14222 18.1322 5.81813L19.5 7.1897V4.50001C19.5 4.3011 19.579 4.11033 19.7197 3.96968C19.8603 3.82903 20.0511 3.75001 20.25 3.75001C20.4489 3.75001 20.6397 3.82903 20.7803 3.96968C20.921 4.11033 21 4.3011 21 4.50001ZM17.4759 17.1834C16.0639 18.5627 14.1651 19.3298 12.1912 19.3182C10.2173 19.3066 8.32762 18.5173 6.93188 17.1216L5.56031 15.75H8.25C8.44891 15.75 8.63968 15.671 8.78033 15.5303C8.92098 15.3897 9 15.1989 9 15C9 14.8011 8.92098 14.6103 8.78033 14.4697C8.63968 14.329 8.44891 14.25 8.25 14.25H3.75C3.55109 14.25 3.36032 14.329 3.21967 14.4697C3.07902 14.6103 3 14.8011 3 15V19.5C3 19.6989 3.07902 19.8897 3.21967 20.0303C3.36032 20.171 3.55109 20.25 3.75 20.25C3.94891 20.25 4.13968 20.171 4.28033 20.0303C4.42098 19.8897 4.5 19.6989 4.5 19.5V16.8103L5.87156 18.1819C7.54426 19.863 9.816 20.8112 12.1875 20.8181H12.2372C14.5885 20.8242 16.8476 19.9037 18.525 18.2559C18.662 18.1158 18.7387 17.9277 18.7387 17.7317C18.7387 17.5358 18.662 17.3476 18.5251 17.2075C18.3881 17.0674 18.2018 16.9864 18.0059 16.9819C17.81 16.9774 17.6201 17.0497 17.4769 17.1834H17.4759Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M21 4.50001V9.00001C21 9.19892 20.921 9.38969 20.7803 9.53034C20.6397 9.67099 20.4489 9.75001 20.25 9.75001H15.75C15.5511 9.75001 15.3603 9.67099 15.2197 9.53034C15.079 9.38969 15 9.19892 15 9.00001C15 8.8011 15.079 8.61033 15.2197 8.46968C15.3603 8.32903 15.5511 8.25001 15.75 8.25001H18.4397L17.0681 6.87845C15.6742 5.4782 13.7817 4.68821 11.8059 4.68188H11.7638C9.80454 4.67729 7.92227 5.44414 6.52406 6.81657C6.38083 6.95028 6.19096 7.02262 5.99507 7.01813C5.79918 7.01364 5.61283 6.93266 5.47588 6.79253C5.33893 6.65239 5.26226 6.46423 5.26227 6.26829C5.26228 6.07235 5.33897 5.88419 5.47594 5.74407C7.1705 4.08788 9.44983 3.16677 11.8193 3.18064C14.1887 3.1945 16.4571 4.14222 18.1322 5.81813L19.5 7.1897V4.50001C19.5 4.3011 19.579 4.11033 19.7197 3.96968C19.8603 3.82903 20.0511 3.75001 20.25 3.75001C20.4489 3.75001 20.6397 3.82903 20.7803 3.96968C20.921 4.11033 21 4.3011 21 4.50001ZM17.4759 17.1834C16.0639 18.5627 14.1651 19.3298 12.1912 19.3182C10.2173 19.3066 8.32762 18.5173 6.93188 17.1216L5.56031 15.75H8.25C8.44891 15.75 8.63968 15.671 8.78033 15.5303C8.92098 15.3897 9 15.1989 9 15C9 14.8011 8.92098 14.6103 8.78033 14.4697C8.63968 14.329 8.44891 14.25 8.25 14.25H3.75C3.55109 14.25 3.36032 14.329 3.21967 14.4697C3.07902 14.6103 3 14.8011 3 15V19.5C3 19.6989 3.07902 19.8897 3.21967 20.0303C3.36032 20.171 3.55109 20.25 3.75 20.25C3.94891 20.25 4.13968 20.171 4.28033 20.0303C4.42098 19.8897 4.5 19.6989 4.5 19.5V16.8103L5.87156 18.1819C7.54426 19.863 9.816 20.8112 12.1875 20.8181H12.2372C14.5885 20.8242 16.8476 19.9037 18.525 18.2559C18.662 18.1158 18.7387 17.9277 18.7387 17.7317C18.7387 17.5358 18.662 17.3476 18.5251 17.2075C18.3881 17.0674 18.2018 16.9864 18.0059 16.9819C17.81 16.9774 17.6201 17.0497 17.4769 17.1834H17.4759Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M21 4.50001V9.00001C21 9.19892 20.921 9.38969 20.7803 9.53034C20.6397 9.67099 20.4489 9.75001 20.25 9.75001H15.75C15.5511 9.75001 15.3603 9.67099 15.2197 9.53034C15.079 9.38969 15 9.19892 15 9.00001C15 8.8011 15.079 8.61033 15.2197 8.46968C15.3603 8.32903 15.5511 8.25001 15.75 8.25001H18.4397L17.0681 6.87845C15.6742 5.4782 13.7817 4.68821 11.8059 4.68188H11.7638C9.80454 4.67729 7.92227 5.44414 6.52406 6.81657C6.38083 6.95028 6.19096 7.02262 5.99507 7.01813C5.79918 7.01364 5.61283 6.93266 5.47588 6.79253C5.33893 6.65239 5.26226 6.46423 5.26227 6.26829C5.26228 6.07235 5.33897 5.88419 5.47594 5.74407C7.1705 4.08788 9.44983 3.16677 11.8193 3.18064C14.1887 3.1945 16.4571 4.14222 18.1322 5.81813L19.5 7.1897V4.50001C19.5 4.3011 19.579 4.11033 19.7197 3.96968C19.8603 3.82903 20.0511 3.75001 20.25 3.75001C20.4489 3.75001 20.6397 3.82903 20.7803 3.96968C20.921 4.11033 21 4.3011 21 4.50001ZM17.4759 17.1834C16.0639 18.5627 14.1651 19.3298 12.1912 19.3182C10.2173 19.3066 8.32762 18.5173 6.93188 17.1216L5.56031 15.75H8.25C8.44891 15.75 8.63968 15.671 8.78033 15.5303C8.92098 15.3897 9 15.1989 9 15C9 14.8011 8.92098 14.6103 8.78033 14.4697C8.63968 14.329 8.44891 14.25 8.25 14.25H3.75C3.55109 14.25 3.36032 14.329 3.21967 14.4697C3.07902 14.6103 3 14.8011 3 15V19.5C3 19.6989 3.07902 19.8897 3.21967 20.0303C3.36032 20.171 3.55109 20.25 3.75 20.25C3.94891 20.25 4.13968 20.171 4.28033 20.0303C4.42098 19.8897 4.5 19.6989 4.5 19.5V16.8103L5.87156 18.1819C7.54426 19.863 9.816 20.8112 12.1875 20.8181H12.2372C14.5885 20.8242 16.8476 19.9037 18.525 18.2559C18.662 18.1158 18.7387 17.9277 18.7387 17.7317C18.7387 17.5358 18.662 17.3476 18.5251 17.2075C18.3881 17.0674 18.2018 16.9864 18.0059 16.9819C17.81 16.9774 17.6201 17.0497 17.4769 17.1834H17.4759Z"
        fill="black"
        fillOpacity="0.2"
      />
    </svg>
  );

  const MchatIcon = ({ className = "" }) => (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M15.75 12C15.75 12.1989 15.671 12.3897 15.5303 12.5303C15.3897 12.671 15.1989 12.75 15 12.75H9C8.80109 12.75 8.61032 12.671 8.46967 12.5303C8.32902 12.3897 8.25 12.1989 8.25 12C8.25 11.8011 8.32902 11.6103 8.46967 11.4697C8.61032 11.329 8.80109 11.25 9 11.25H15C15.1989 11.25 15.3897 11.329 15.5303 11.4697C15.671 11.6103 15.75 11.8011 15.75 12ZM15 14.25H9C8.80109 14.25 8.61032 14.329 8.46967 14.4697C8.32902 14.6103 8.25 14.8011 8.25 15C8.25 15.1989 8.32902 15.3897 8.46967 15.5303C8.61032 15.671 8.80109 15.75 9 15.75H15C15.1989 15.75 15.3897 15.671 15.5303 15.5303C15.671 15.3897 15.75 15.1989 15.75 15C15.75 14.8011 15.671 14.6103 15.5303 14.4697C15.3897 14.329 15.1989 14.25 15 14.25ZM20.25 3.75V18.75C20.25 19.5456 19.9339 20.3087 19.3713 20.8713C18.8087 21.4339 18.0456 21.75 17.25 21.75H6.75C5.95435 21.75 5.19129 21.4339 4.62868 20.8713C4.06607 20.3087 3.75 19.5456 3.75 18.75V3.75C3.75 3.55109 3.82902 3.36032 3.96967 3.21967C4.11032 3.07902 4.30109 3 4.5 3H6.75V2.25C6.75 2.05109 6.82902 1.86032 6.96967 1.71967C7.11032 1.57902 7.30109 1.5 7.5 1.5C7.69891 1.5 7.88968 1.57902 8.03033 1.71967C8.17098 1.86032 8.25 2.05109 8.25 2.25V3H11.25V2.25C11.25 2.05109 11.329 1.86032 11.4697 1.71967C11.6103 1.57902 11.8011 1.5 12 1.5C12.1989 1.5 12.3897 1.57902 12.5303 1.71967C12.671 1.86032 12.75 2.05109 12.75 2.25V3H15.75V2.25C15.75 2.05109 15.829 1.86032 15.9697 1.71967C16.1103 1.57902 16.3011 1.5 16.5 1.5C16.6989 1.5 16.8897 1.57902 17.0303 1.71967C17.171 1.86032 17.25 2.05109 17.25 2.25V3H19.5C19.6989 3 19.8897 3.07902 20.0303 3.21967C20.171 3.36032 20.25 3.55109 20.25 3.75ZM18.75 4.5H17.25V5.25C17.25 5.44891 17.171 5.63968 17.0303 5.78033C16.8897 5.92098 16.6989 6 16.5 6C16.3011 6 16.1103 5.92098 15.9697 5.78033C15.829 5.63968 15.75 5.44891 15.75 5.25V4.5H12.75V5.25C12.75 5.44891 12.671 5.63968 12.5303 5.78033C12.3897 5.92098 12.1989 6 12 6C11.8011 6 11.6103 5.92098 11.4697 5.78033C11.329 5.63968 11.25 5.44891 11.25 5.25V4.5H8.25V5.25C8.25 5.44891 8.17098 5.63968 8.03033 5.78033C7.88968 5.92098 7.69891 6 7.5 6C7.30109 6 7.11032 5.92098 6.96967 5.78033C6.82902 5.63968 6.75 5.44891 6.75 5.25V4.5H5.25V18.75C5.25 19.1478 5.40804 19.5294 5.68934 19.8107C5.97064 20.092 6.35218 20.25 6.75 20.25H17.25C17.6478 20.25 18.0294 20.092 18.3107 19.8107C18.592 19.5294 18.75 19.1478 18.75 18.75V4.5Z"
        fill="black"
      />
      <path
        d="M15.75 12C15.75 12.1989 15.671 12.3897 15.5303 12.5303C15.3897 12.671 15.1989 12.75 15 12.75H9C8.80109 12.75 8.61032 12.671 8.46967 12.5303C8.32902 12.3897 8.25 12.1989 8.25 12C8.25 11.8011 8.32902 11.6103 8.46967 11.4697C8.61032 11.329 8.80109 11.25 9 11.25H15C15.1989 11.25 15.3897 11.329 15.5303 11.4697C15.671 11.6103 15.75 11.8011 15.75 12ZM15 14.25H9C8.80109 14.25 8.61032 14.329 8.46967 14.4697C8.32902 14.6103 8.25 14.8011 8.25 15C8.25 15.1989 8.32902 15.3897 8.46967 15.5303C8.61032 15.671 8.80109 15.75 9 15.75H15C15.1989 15.75 15.3897 15.671 15.5303 15.5303C15.671 15.3897 15.75 15.1989 15.75 15C15.75 14.8011 15.671 14.6103 15.5303 14.4697C15.3897 14.329 15.1989 14.25 15 14.25ZM20.25 3.75V18.75C20.25 19.5456 19.9339 20.3087 19.3713 20.8713C18.8087 21.4339 18.0456 21.75 17.25 21.75H6.75C5.95435 21.75 5.19129 21.4339 4.62868 20.8713C4.06607 20.3087 3.75 19.5456 3.75 18.75V3.75C3.75 3.55109 3.82902 3.36032 3.96967 3.21967C4.11032 3.07902 4.30109 3 4.5 3H6.75V2.25C6.75 2.05109 6.82902 1.86032 6.96967 1.71967C7.11032 1.57902 7.30109 1.5 7.5 1.5C7.69891 1.5 7.88968 1.57902 8.03033 1.71967C8.17098 1.86032 8.25 2.05109 8.25 2.25V3H11.25V2.25C11.25 2.05109 11.329 1.86032 11.4697 1.71967C11.6103 1.57902 11.8011 1.5 12 1.5C12.1989 1.5 12.3897 1.57902 12.5303 1.71967C12.671 1.86032 12.75 2.05109 12.75 2.25V3H15.75V2.25C15.75 2.05109 15.829 1.86032 15.9697 1.71967C16.1103 1.57902 16.3011 1.5 16.5 1.5C16.6989 1.5 16.8897 1.57902 17.0303 1.71967C17.171 1.86032 17.25 2.05109 17.25 2.25V3H19.5C19.6989 3 19.8897 3.07902 20.0303 3.21967C20.171 3.36032 20.25 3.55109 20.25 3.75ZM18.75 4.5H17.25V5.25C17.25 5.44891 17.171 5.63968 17.0303 5.78033C16.8897 5.92098 16.6989 6 16.5 6C16.3011 6 16.1103 5.92098 15.9697 5.78033C15.829 5.63968 15.75 5.44891 15.75 5.25V4.5H12.75V5.25C12.75 5.44891 12.671 5.63968 12.5303 5.78033C12.3897 5.92098 12.1989 6 12 6C11.8011 6 11.6103 5.92098 11.4697 5.78033C11.329 5.63968 11.25 5.44891 11.25 5.25V4.5H8.25V5.25C8.25 5.44891 8.17098 5.63968 8.03033 5.78033C7.88968 5.92098 7.69891 6 7.5 6C7.30109 6 7.11032 5.92098 6.96967 5.78033C6.82902 5.63968 6.75 5.44891 6.75 5.25V4.5H5.25V18.75C5.25 19.1478 5.40804 19.5294 5.68934 19.8107C5.97064 20.092 6.35218 20.25 6.75 20.25H17.25C17.6478 20.25 18.0294 20.092 18.3107 19.8107C18.592 19.5294 18.75 19.1478 18.75 18.75V4.5Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M15.75 12C15.75 12.1989 15.671 12.3897 15.5303 12.5303C15.3897 12.671 15.1989 12.75 15 12.75H9C8.80109 12.75 8.61032 12.671 8.46967 12.5303C8.32902 12.3897 8.25 12.1989 8.25 12C8.25 11.8011 8.32902 11.6103 8.46967 11.4697C8.61032 11.329 8.80109 11.25 9 11.25H15C15.1989 11.25 15.3897 11.329 15.5303 11.4697C15.671 11.6103 15.75 11.8011 15.75 12ZM15 14.25H9C8.80109 14.25 8.61032 14.329 8.46967 14.4697C8.32902 14.6103 8.25 14.8011 8.25 15C8.25 15.1989 8.32902 15.3897 8.46967 15.5303C8.61032 15.671 8.80109 15.75 9 15.75H15C15.1989 15.75 15.3897 15.671 15.5303 15.5303C15.671 15.3897 15.75 15.1989 15.75 15C15.75 14.8011 15.671 14.6103 15.5303 14.4697C15.3897 14.329 15.1989 14.25 15 14.25ZM20.25 3.75V18.75C20.25 19.5456 19.9339 20.3087 19.3713 20.8713C18.8087 21.4339 18.0456 21.75 17.25 21.75H6.75C5.95435 21.75 5.19129 21.4339 4.62868 20.8713C4.06607 20.3087 3.75 19.5456 3.75 18.75V3.75C3.75 3.55109 3.82902 3.36032 3.96967 3.21967C4.11032 3.07902 4.30109 3 4.5 3H6.75V2.25C6.75 2.05109 6.82902 1.86032 6.96967 1.71967C7.11032 1.57902 7.30109 1.5 7.5 1.5C7.69891 1.5 7.88968 1.57902 8.03033 1.71967C8.17098 1.86032 8.25 2.05109 8.25 2.25V3H11.25V2.25C11.25 2.05109 11.329 1.86032 11.4697 1.71967C11.6103 1.57902 11.8011 1.5 12 1.5C12.1989 1.5 12.3897 1.57902 12.5303 1.71967C12.671 1.86032 12.75 2.05109 12.75 2.25V3H15.75V2.25C15.75 2.05109 15.829 1.86032 15.9697 1.71967C16.1103 1.57902 16.3011 1.5 16.5 1.5C16.6989 1.5 16.8897 1.57902 17.0303 1.71967C17.171 1.86032 17.25 2.05109 17.25 2.25V3H19.5C19.6989 3 19.8897 3.07902 20.0303 3.21967C20.171 3.36032 20.25 3.55109 20.25 3.75ZM18.75 4.5H17.25V5.25C17.25 5.44891 17.171 5.63968 17.0303 5.78033C16.8897 5.92098 16.6989 6 16.5 6C16.3011 6 16.1103 5.92098 15.9697 5.78033C15.829 5.63968 15.75 5.44891 15.75 5.25V4.5H12.75V5.25C12.75 5.44891 12.671 5.63968 12.5303 5.78033C12.3897 5.92098 12.1989 6 12 6C11.8011 6 11.6103 5.92098 11.4697 5.78033C11.329 5.63968 11.25 5.44891 11.25 5.25V4.5H8.25V5.25C8.25 5.44891 8.17098 5.63968 8.03033 5.78033C7.88968 5.92098 7.69891 6 7.5 6C7.30109 6 7.11032 5.92098 6.96967 5.78033C6.82902 5.63968 6.75 5.44891 6.75 5.25V4.5H5.25V18.75C5.25 19.1478 5.40804 19.5294 5.68934 19.8107C5.97064 20.092 6.35218 20.25 6.75 20.25H17.25C17.6478 20.25 18.0294 20.092 18.3107 19.8107C18.592 19.5294 18.75 19.1478 18.75 18.75V4.5Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M15.75 12C15.75 12.1989 15.671 12.3897 15.5303 12.5303C15.3897 12.671 15.1989 12.75 15 12.75H9C8.80109 12.75 8.61032 12.671 8.46967 12.5303C8.32902 12.3897 8.25 12.1989 8.25 12C8.25 11.8011 8.32902 11.6103 8.46967 11.4697C8.61032 11.329 8.80109 11.25 9 11.25H15C15.1989 11.25 15.3897 11.329 15.5303 11.4697C15.671 11.6103 15.75 11.8011 15.75 12ZM15 14.25H9C8.80109 14.25 8.61032 14.329 8.46967 14.4697C8.32902 14.6103 8.25 14.8011 8.25 15C8.25 15.1989 8.32902 15.3897 8.46967 15.5303C8.61032 15.671 8.80109 15.75 9 15.75H15C15.1989 15.75 15.3897 15.671 15.5303 15.5303C15.671 15.3897 15.75 15.1989 15.75 15C15.75 14.8011 15.671 14.6103 15.5303 14.4697C15.3897 14.329 15.1989 14.25 15 14.25ZM20.25 3.75V18.75C20.25 19.5456 19.9339 20.3087 19.3713 20.8713C18.8087 21.4339 18.0456 21.75 17.25 21.75H6.75C5.95435 21.75 5.19129 21.4339 4.62868 20.8713C4.06607 20.3087 3.75 19.5456 3.75 18.75V3.75C3.75 3.55109 3.82902 3.36032 3.96967 3.21967C4.11032 3.07902 4.30109 3 4.5 3H6.75V2.25C6.75 2.05109 6.82902 1.86032 6.96967 1.71967C7.11032 1.57902 7.30109 1.5 7.5 1.5C7.69891 1.5 7.88968 1.57902 8.03033 1.71967C8.17098 1.86032 8.25 2.05109 8.25 2.25V3H11.25V2.25C11.25 2.05109 11.329 1.86032 11.4697 1.71967C11.6103 1.57902 11.8011 1.5 12 1.5C12.1989 1.5 12.3897 1.57902 12.5303 1.71967C12.671 1.86032 12.75 2.05109 12.75 2.25V3H15.75V2.25C15.75 2.05109 15.829 1.86032 15.9697 1.71967C16.1103 1.57902 16.3011 1.5 16.5 1.5C16.6989 1.5 16.8897 1.57902 17.0303 1.71967C17.171 1.86032 17.25 2.05109 17.25 2.25V3H19.5C19.6989 3 19.8897 3.07902 20.0303 3.21967C20.171 3.36032 20.25 3.55109 20.25 3.75ZM18.75 4.5H17.25V5.25C17.25 5.44891 17.171 5.63968 17.0303 5.78033C16.8897 5.92098 16.6989 6 16.5 6C16.3011 6 16.1103 5.92098 15.9697 5.78033C15.829 5.63968 15.75 5.44891 15.75 5.25V4.5H12.75V5.25C12.75 5.44891 12.671 5.63968 12.5303 5.78033C12.3897 5.92098 12.1989 6 12 6C11.8011 6 11.6103 5.92098 11.4697 5.78033C11.329 5.63968 11.25 5.44891 11.25 5.25V4.5H8.25V5.25C8.25 5.44891 8.17098 5.63968 8.03033 5.78033C7.88968 5.92098 7.69891 6 7.5 6C7.30109 6 7.11032 5.92098 6.96967 5.78033C6.82902 5.63968 6.75 5.44891 6.75 5.25V4.5H5.25V18.75C5.25 19.1478 5.40804 19.5294 5.68934 19.8107C5.97064 20.092 6.35218 20.25 6.75 20.25H17.25C17.6478 20.25 18.0294 20.092 18.3107 19.8107C18.592 19.5294 18.75 19.1478 18.75 18.75V4.5Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M15.75 12C15.75 12.1989 15.671 12.3897 15.5303 12.5303C15.3897 12.671 15.1989 12.75 15 12.75H9C8.80109 12.75 8.61032 12.671 8.46967 12.5303C8.32902 12.3897 8.25 12.1989 8.25 12C8.25 11.8011 8.32902 11.6103 8.46967 11.4697C8.61032 11.329 8.80109 11.25 9 11.25H15C15.1989 11.25 15.3897 11.329 15.5303 11.4697C15.671 11.6103 15.75 11.8011 15.75 12ZM15 14.25H9C8.80109 14.25 8.61032 14.329 8.46967 14.4697C8.32902 14.6103 8.25 14.8011 8.25 15C8.25 15.1989 8.32902 15.3897 8.46967 15.5303C8.61032 15.671 8.80109 15.75 9 15.75H15C15.1989 15.75 15.3897 15.671 15.5303 15.5303C15.671 15.3897 15.75 15.1989 15.75 15C15.75 14.8011 15.671 14.6103 15.5303 14.4697C15.3897 14.329 15.1989 14.25 15 14.25ZM20.25 3.75V18.75C20.25 19.5456 19.9339 20.3087 19.3713 20.8713C18.8087 21.4339 18.0456 21.75 17.25 21.75H6.75C5.95435 21.75 5.19129 21.4339 4.62868 20.8713C4.06607 20.3087 3.75 19.5456 3.75 18.75V3.75C3.75 3.55109 3.82902 3.36032 3.96967 3.21967C4.11032 3.07902 4.30109 3 4.5 3H6.75V2.25C6.75 2.05109 6.82902 1.86032 6.96967 1.71967C7.11032 1.57902 7.30109 1.5 7.5 1.5C7.69891 1.5 7.88968 1.57902 8.03033 1.71967C8.17098 1.86032 8.25 2.05109 8.25 2.25V3H11.25V2.25C11.25 2.05109 11.329 1.86032 11.4697 1.71967C11.6103 1.57902 11.8011 1.5 12 1.5C12.1989 1.5 12.3897 1.57902 12.5303 1.71967C12.671 1.86032 12.75 2.05109 12.75 2.25V3H15.75V2.25C15.75 2.05109 15.829 1.86032 15.9697 1.71967C16.1103 1.57902 16.3011 1.5 16.5 1.5C16.6989 1.5 16.8897 1.57902 17.0303 1.71967C17.171 1.86032 17.25 2.05109 17.25 2.25V3H19.5C19.6989 3 19.8897 3.07902 20.0303 3.21967C20.171 3.36032 20.25 3.55109 20.25 3.75ZM18.75 4.5H17.25V5.25C17.25 5.44891 17.171 5.63968 17.0303 5.78033C16.8897 5.92098 16.6989 6 16.5 6C16.3011 6 16.1103 5.92098 15.9697 5.78033C15.829 5.63968 15.75 5.44891 15.75 5.25V4.5H12.75V5.25C12.75 5.44891 12.671 5.63968 12.5303 5.78033C12.3897 5.92098 12.1989 6 12 6C11.8011 6 11.6103 5.92098 11.4697 5.78033C11.329 5.63968 11.25 5.44891 11.25 5.25V4.5H8.25V5.25C8.25 5.44891 8.17098 5.63968 8.03033 5.78033C7.88968 5.92098 7.69891 6 7.5 6C7.30109 6 7.11032 5.92098 6.96967 5.78033C6.82902 5.63968 6.75 5.44891 6.75 5.25V4.5H5.25V18.75C5.25 19.1478 5.40804 19.5294 5.68934 19.8107C5.97064 20.092 6.35218 20.25 6.75 20.25H17.25C17.6478 20.25 18.0294 20.092 18.3107 19.8107C18.592 19.5294 18.75 19.1478 18.75 18.75V4.5Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M15.75 12C15.75 12.1989 15.671 12.3897 15.5303 12.5303C15.3897 12.671 15.1989 12.75 15 12.75H9C8.80109 12.75 8.61032 12.671 8.46967 12.5303C8.32902 12.3897 8.25 12.1989 8.25 12C8.25 11.8011 8.32902 11.6103 8.46967 11.4697C8.61032 11.329 8.80109 11.25 9 11.25H15C15.1989 11.25 15.3897 11.329 15.5303 11.4697C15.671 11.6103 15.75 11.8011 15.75 12ZM15 14.25H9C8.80109 14.25 8.61032 14.329 8.46967 14.4697C8.32902 14.6103 8.25 14.8011 8.25 15C8.25 15.1989 8.32902 15.3897 8.46967 15.5303C8.61032 15.671 8.80109 15.75 9 15.75H15C15.1989 15.75 15.3897 15.671 15.5303 15.5303C15.671 15.3897 15.75 15.1989 15.75 15C15.75 14.8011 15.671 14.6103 15.5303 14.4697C15.3897 14.329 15.1989 14.25 15 14.25ZM20.25 3.75V18.75C20.25 19.5456 19.9339 20.3087 19.3713 20.8713C18.8087 21.4339 18.0456 21.75 17.25 21.75H6.75C5.95435 21.75 5.19129 21.4339 4.62868 20.8713C4.06607 20.3087 3.75 19.5456 3.75 18.75V3.75C3.75 3.55109 3.82902 3.36032 3.96967 3.21967C4.11032 3.07902 4.30109 3 4.5 3H6.75V2.25C6.75 2.05109 6.82902 1.86032 6.96967 1.71967C7.11032 1.57902 7.30109 1.5 7.5 1.5C7.69891 1.5 7.88968 1.57902 8.03033 1.71967C8.17098 1.86032 8.25 2.05109 8.25 2.25V3H11.25V2.25C11.25 2.05109 11.329 1.86032 11.4697 1.71967C11.6103 1.57902 11.8011 1.5 12 1.5C12.1989 1.5 12.3897 1.57902 12.5303 1.71967C12.671 1.86032 12.75 2.05109 12.75 2.25V3H15.75V2.25C15.75 2.05109 15.829 1.86032 15.9697 1.71967C16.1103 1.57902 16.3011 1.5 16.5 1.5C16.6989 1.5 16.8897 1.57902 17.0303 1.71967C17.171 1.86032 17.25 2.05109 17.25 2.25V3H19.5C19.6989 3 19.8897 3.07902 20.0303 3.21967C20.171 3.36032 20.25 3.55109 20.25 3.75ZM18.75 4.5H17.25V5.25C17.25 5.44891 17.171 5.63968 17.0303 5.78033C16.8897 5.92098 16.6989 6 16.5 6C16.3011 6 16.1103 5.92098 15.9697 5.78033C15.829 5.63968 15.75 5.44891 15.75 5.25V4.5H12.75V5.25C12.75 5.44891 12.671 5.63968 12.5303 5.78033C12.3897 5.92098 12.1989 6 12 6C11.8011 6 11.6103 5.92098 11.4697 5.78033C11.329 5.63968 11.25 5.44891 11.25 5.25V4.5H8.25V5.25C8.25 5.44891 8.17098 5.63968 8.03033 5.78033C7.88968 5.92098 7.69891 6 7.5 6C7.30109 6 7.11032 5.92098 6.96967 5.78033C6.82902 5.63968 6.75 5.44891 6.75 5.25V4.5H5.25V18.75C5.25 19.1478 5.40804 19.5294 5.68934 19.8107C5.97064 20.092 6.35218 20.25 6.75 20.25H17.25C17.6478 20.25 18.0294 20.092 18.3107 19.8107C18.592 19.5294 18.75 19.1478 18.75 18.75V4.5Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M15.75 12C15.75 12.1989 15.671 12.3897 15.5303 12.5303C15.3897 12.671 15.1989 12.75 15 12.75H9C8.80109 12.75 8.61032 12.671 8.46967 12.5303C8.32902 12.3897 8.25 12.1989 8.25 12C8.25 11.8011 8.32902 11.6103 8.46967 11.4697C8.61032 11.329 8.80109 11.25 9 11.25H15C15.1989 11.25 15.3897 11.329 15.5303 11.4697C15.671 11.6103 15.75 11.8011 15.75 12ZM15 14.25H9C8.80109 14.25 8.61032 14.329 8.46967 14.4697C8.32902 14.6103 8.25 14.8011 8.25 15C8.25 15.1989 8.32902 15.3897 8.46967 15.5303C8.61032 15.671 8.80109 15.75 9 15.75H15C15.1989 15.75 15.3897 15.671 15.5303 15.5303C15.671 15.3897 15.75 15.1989 15.75 15C15.75 14.8011 15.671 14.6103 15.5303 14.4697C15.3897 14.329 15.1989 14.25 15 14.25ZM20.25 3.75V18.75C20.25 19.5456 19.9339 20.3087 19.3713 20.8713C18.8087 21.4339 18.0456 21.75 17.25 21.75H6.75C5.95435 21.75 5.19129 21.4339 4.62868 20.8713C4.06607 20.3087 3.75 19.5456 3.75 18.75V3.75C3.75 3.55109 3.82902 3.36032 3.96967 3.21967C4.11032 3.07902 4.30109 3 4.5 3H6.75V2.25C6.75 2.05109 6.82902 1.86032 6.96967 1.71967C7.11032 1.57902 7.30109 1.5 7.5 1.5C7.69891 1.5 7.88968 1.57902 8.03033 1.71967C8.17098 1.86032 8.25 2.05109 8.25 2.25V3H11.25V2.25C11.25 2.05109 11.329 1.86032 11.4697 1.71967C11.6103 1.57902 11.8011 1.5 12 1.5C12.1989 1.5 12.3897 1.57902 12.5303 1.71967C12.671 1.86032 12.75 2.05109 12.75 2.25V3H15.75V2.25C15.75 2.05109 15.829 1.86032 15.9697 1.71967C16.1103 1.57902 16.3011 1.5 16.5 1.5C16.6989 1.5 16.8897 1.57902 17.0303 1.71967C17.171 1.86032 17.25 2.05109 17.25 2.25V3H19.5C19.6989 3 19.8897 3.07902 20.0303 3.21967C20.171 3.36032 20.25 3.55109 20.25 3.75ZM18.75 4.5H17.25V5.25C17.25 5.44891 17.171 5.63968 17.0303 5.78033C16.8897 5.92098 16.6989 6 16.5 6C16.3011 6 16.1103 5.92098 15.9697 5.78033C15.829 5.63968 15.75 5.44891 15.75 5.25V4.5H12.75V5.25C12.75 5.44891 12.671 5.63968 12.5303 5.78033C12.3897 5.92098 12.1989 6 12 6C11.8011 6 11.6103 5.92098 11.4697 5.78033C11.329 5.63968 11.25 5.44891 11.25 5.25V4.5H8.25V5.25C8.25 5.44891 8.17098 5.63968 8.03033 5.78033C7.88968 5.92098 7.69891 6 7.5 6C7.30109 6 7.11032 5.92098 6.96967 5.78033C6.82902 5.63968 6.75 5.44891 6.75 5.25V4.5H5.25V18.75C5.25 19.1478 5.40804 19.5294 5.68934 19.8107C5.97064 20.092 6.35218 20.25 6.75 20.25H17.25C17.6478 20.25 18.0294 20.092 18.3107 19.8107C18.592 19.5294 18.75 19.1478 18.75 18.75V4.5Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M15.75 12C15.75 12.1989 15.671 12.3897 15.5303 12.5303C15.3897 12.671 15.1989 12.75 15 12.75H9C8.80109 12.75 8.61032 12.671 8.46967 12.5303C8.32902 12.3897 8.25 12.1989 8.25 12C8.25 11.8011 8.32902 11.6103 8.46967 11.4697C8.61032 11.329 8.80109 11.25 9 11.25H15C15.1989 11.25 15.3897 11.329 15.5303 11.4697C15.671 11.6103 15.75 11.8011 15.75 12ZM15 14.25H9C8.80109 14.25 8.61032 14.329 8.46967 14.4697C8.32902 14.6103 8.25 14.8011 8.25 15C8.25 15.1989 8.32902 15.3897 8.46967 15.5303C8.61032 15.671 8.80109 15.75 9 15.75H15C15.1989 15.75 15.3897 15.671 15.5303 15.5303C15.671 15.3897 15.75 15.1989 15.75 15C15.75 14.8011 15.671 14.6103 15.5303 14.4697C15.3897 14.329 15.1989 14.25 15 14.25ZM20.25 3.75V18.75C20.25 19.5456 19.9339 20.3087 19.3713 20.8713C18.8087 21.4339 18.0456 21.75 17.25 21.75H6.75C5.95435 21.75 5.19129 21.4339 4.62868 20.8713C4.06607 20.3087 3.75 19.5456 3.75 18.75V3.75C3.75 3.55109 3.82902 3.36032 3.96967 3.21967C4.11032 3.07902 4.30109 3 4.5 3H6.75V2.25C6.75 2.05109 6.82902 1.86032 6.96967 1.71967C7.11032 1.57902 7.30109 1.5 7.5 1.5C7.69891 1.5 7.88968 1.57902 8.03033 1.71967C8.17098 1.86032 8.25 2.05109 8.25 2.25V3H11.25V2.25C11.25 2.05109 11.329 1.86032 11.4697 1.71967C11.6103 1.57902 11.8011 1.5 12 1.5C12.1989 1.5 12.3897 1.57902 12.5303 1.71967C12.671 1.86032 12.75 2.05109 12.75 2.25V3H15.75V2.25C15.75 2.05109 15.829 1.86032 15.9697 1.71967C16.1103 1.57902 16.3011 1.5 16.5 1.5C16.6989 1.5 16.8897 1.57902 17.0303 1.71967C17.171 1.86032 17.25 2.05109 17.25 2.25V3H19.5C19.6989 3 19.8897 3.07902 20.0303 3.21967C20.171 3.36032 20.25 3.55109 20.25 3.75ZM18.75 4.5H17.25V5.25C17.25 5.44891 17.171 5.63968 17.0303 5.78033C16.8897 5.92098 16.6989 6 16.5 6C16.3011 6 16.1103 5.92098 15.9697 5.78033C15.829 5.63968 15.75 5.44891 15.75 5.25V4.5H12.75V5.25C12.75 5.44891 12.671 5.63968 12.5303 5.78033C12.3897 5.92098 12.1989 6 12 6C11.8011 6 11.6103 5.92098 11.4697 5.78033C11.329 5.63968 11.25 5.44891 11.25 5.25V4.5H8.25V5.25C8.25 5.44891 8.17098 5.63968 8.03033 5.78033C7.88968 5.92098 7.69891 6 7.5 6C7.30109 6 7.11032 5.92098 6.96967 5.78033C6.82902 5.63968 6.75 5.44891 6.75 5.25V4.5H5.25V18.75C5.25 19.1478 5.40804 19.5294 5.68934 19.8107C5.97064 20.092 6.35218 20.25 6.75 20.25H17.25C17.6478 20.25 18.0294 20.092 18.3107 19.8107C18.592 19.5294 18.75 19.1478 18.75 18.75V4.5Z"
        fill="black"
        fillOpacity="0.2"
      />
      <path
        d="M15.75 12C15.75 12.1989 15.671 12.3897 15.5303 12.5303C15.3897 12.671 15.1989 12.75 15 12.75H9C8.80109 12.75 8.61032 12.671 8.46967 12.5303C8.32902 12.3897 8.25 12.1989 8.25 12C8.25 11.8011 8.32902 11.6103 8.46967 11.4697C8.61032 11.329 8.80109 11.25 9 11.25H15C15.1989 11.25 15.3897 11.329 15.5303 11.4697C15.671 11.6103 15.75 11.8011 15.75 12ZM15 14.25H9C8.80109 14.25 8.61032 14.329 8.46967 14.4697C8.32902 14.6103 8.25 14.8011 8.25 15C8.25 15.1989 8.32902 15.3897 8.46967 15.5303C8.61032 15.671 8.80109 15.75 9 15.75H15C15.1989 15.75 15.3897 15.671 15.5303 15.5303C15.671 15.3897 15.75 15.1989 15.75 15C15.75 14.8011 15.671 14.6103 15.5303 14.4697C15.3897 14.329 15.1989 14.25 15 14.25ZM20.25 3.75V18.75C20.25 19.5456 19.9339 20.3087 19.3713 20.8713C18.8087 21.4339 18.0456 21.75 17.25 21.75H6.75C5.95435 21.75 5.19129 21.4339 4.62868 20.8713C4.06607 20.3087 3.75 19.5456 3.75 18.75V3.75C3.75 3.55109 3.82902 3.36032 3.96967 3.21967C4.11032 3.07902 4.30109 3 4.5 3H6.75V2.25C6.75 2.05109 6.82902 1.86032 6.96967 1.71967C7.11032 1.57902 7.30109 1.5 7.5 1.5C7.69891 1.5 7.88968 1.57902 8.03033 1.71967C8.17098 1.86032 8.25 2.05109 8.25 2.25V3H11.25V2.25C11.25 2.05109 11.329 1.86032 11.4697 1.71967C11.6103 1.57902 11.8011 1.5 12 1.5C12.1989 1.5 12.3897 1.57902 12.5303 1.71967C12.671 1.86032 12.75 2.05109 12.75 2.25V3H15.75V2.25C15.75 2.05109 15.829 1.86032 15.9697 1.71967C16.1103 1.57902 16.3011 1.5 16.5 1.5C16.6989 1.5 16.8897 1.57902 17.0303 1.71967C17.171 1.86032 17.25 2.05109 17.25 2.25V3H19.5C19.6989 3 19.8897 3.07902 20.0303 3.21967C20.171 3.36032 20.25 3.55109 20.25 3.75ZM18.75 4.5H17.25V5.25C17.25 5.44891 17.171 5.63968 17.0303 5.78033C16.8897 5.92098 16.6989 6 16.5 6C16.3011 6 16.1103 5.92098 15.9697 5.78033C15.829 5.63968 15.75 5.44891 15.75 5.25V4.5H12.75V5.25C12.75 5.44891 12.671 5.63968 12.5303 5.78033C12.3897 5.92098 12.1989 6 12 6C11.8011 6 11.6103 5.92098 11.4697 5.78033C11.329 5.63968 11.25 5.44891 11.25 5.25V4.5H8.25V5.25C8.25 5.44891 8.17098 5.63968 8.03033 5.78033C7.88968 5.92098 7.69891 6 7.5 6C7.30109 6 7.11032 5.92098 6.96967 5.78033C6.82902 5.63968 6.75 5.44891 6.75 5.25V4.5H5.25V18.75C5.25 19.1478 5.40804 19.5294 5.68934 19.8107C5.97064 20.092 6.35218 20.25 6.75 20.25H17.25C17.6478 20.25 18.0294 20.092 18.3107 19.8107C18.592 19.5294 18.75 19.1478 18.75 18.75V4.5Z"
        fill="black"
        fillOpacity="0.2"
      />
    </svg>
  );

  const getSimulationStep = (status: string): string => {
    switch (status) {
      case "initializing":
        return "Initializing simulation...";
      case "segment_processing":
        return "Processing audience segments...";
      case "generating_personas":
        return "Generating audience profiles...";
      case "running_simulation":
        return "Running simulation with profiles...";
      case "analyzing_results":
        return "Analyzing simulation results...";
      case "optimizing":
        return "Optimizing recommendations...";
      case "complete":
        return "Simulation complete!";
      default:
        return "Processing...";
    }
  };

  const fetchChatHistory = async (personaId?: number) => {
    if (!simulationId) return;

    try {
      let url = "";
      if (chatTab === "simulation") {
        url = `${API_URL}/chat/simulation/${simulationId}`;
      } else if (chatTab === "persona" && personaId) {
        url = `${API_URL}/chat/simulation/marketing/${simulationId}/persona/${personaId}`;
      } else {
        return;
      }

      const response = await fetch(url, {
        credentials: "include",
      });

      if (!response.ok) {
        if (response.status === 404) {
          // No chat history yet, set empty array
          setChatHistory([]);
          return;
        }
        throw new Error("Failed to fetch chat history");
      }

      const data = await response.json();
      setChatHistory(data.messages || []);
    } catch (err) {
      console.error("Error fetching chat history:", err);
      setChatHistory([]);
    }
  };

  const sendChatMessage = async () => {
    if (!simulationId || !chatMessage.trim() || sendingMessage) return;

    setSendingMessage(true);

    try {
      let url = "";
      let body = { message: chatMessage };
      let newUserMessage: ChatMessage;

      // Set the correct URL and user message role based on the active chat tab
      if (chatTab === "simulation") {
        url = `${API_URL}/chat/simulation/${simulationId}`;
        // For simulation chat, use 'use' role
        newUserMessage = {
          role: "use",
          content: chatMessage,
          timestamp: new Date().toISOString(),
        };
      } else if (chatTab === "persona" && selectedPersona) {
        url = `${API_URL}/chat/simulation/${simulationId}/persona/${selectedPersona}`;
        // For persona chat, use 'user' role
        newUserMessage = {
          role: "use_persona",
          content: chatMessage,
          timestamp: new Date().toISOString(),
        };
      } else {
        throw new Error("Invalid chat target");
      }

      // Add user message immediately for better UX
      setChatHistory((prev) => [...prev, newUserMessage]);
      setChatMessage(""); // Clear input field immediately

      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify(body),
      });

      if (!response.ok) {
        throw new Error("Failed to send message");
      }

      const data = await response.json();
      setChatHistory(data.chat_history || []);

      // Focus back to textarea
      if (textareaRef.current) {
        textareaRef.current.focus();
      }
    } catch (err) {
      console.error("Error sending chat message:", err);
      setError("Failed to send message. Please try again.");
    } finally {
      setSendingMessage(false);
    }
  };

  const selectPersona = (personaId: number) => {
    setSelectedPersona(personaId);
    fetchChatHistory(personaId);
  };

  const handleChatTabChange = (tab: "simulation" | "persona") => {
    setChatTab(tab);
    if (tab === "simulation") {
      fetchChatHistory();
    } else if (tab === "persona" && simulation?.personas?.length) {
      // Select first persona by default if none selected
      const personaId = selectedPersona || simulation.personas[0].id;
      setSelectedPersona(personaId);
      fetchChatHistory(personaId);
    }
  };
  useEffect(() => {
    handleChatTabChange("simulation");
  }, []);

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendChatMessage();
    }
  };

  // Define an interface for persona info
  interface PersonaInfo {
    name: string;
    age: string;
    job_title: string;
    occupation: string;
    behavioral_archetype: string;
    organizational_influence: string;
  }

  const extractPersonaInfo = (
    personaData: string | Record<string, unknown>
  ): PersonaInfo => {
    try {
      const data =
        typeof personaData === "string" ? JSON.parse(personaData) : personaData;

      // Process each field, handling complex nested structures if present
      const extractField = (
        field: string,
        defaultValue: string = "N/A"
      ): string => {
        const value = data[field];

        // If the field is missing or null/undefined
        if (value === undefined || value === null) return defaultValue;

        // If the field is a simple value, return it as a string
        if (typeof value !== "object") return String(value);

        // For complex objects, JSON stringify them with formatting
        try {
          // Don't fully expand very deep objects to avoid UI clutter
          if (Object.keys(value as Record<string, unknown>).length > 5) {
            return `Complex data (${
              Object.keys(value as Record<string, unknown>).length
            } properties)`;
          }
          return JSON.stringify(value, null, 2);
        } catch (error) {
          console.error("Error processing complex data:", error);
          return "Complex data";
        }
      };

      return {
        name: extractField("name", "Unknown"),
        age: extractField("age"),
        job_title: extractField("job_title"),
        occupation: extractField("occupation"),
        behavioral_archetype: extractField("behavioral_archetype"),
        organizational_influence: extractField("organizational_influence"),
      };
    } catch (error) {
      console.error("Error parsing persona data:", error);
      return {
        name: "Unknown",
        age: "N/A",
        job_title: "N/A",
        occupation: "N/A",
        behavioral_archetype: "N/A",
        organizational_influence: "N/A",
      };
    }
  };

  // Parse the content field from simulation data
  const parseContentField = () => {
    if (!simulation?.content) return null;

    try {
      const contentData = JSON.parse(simulation.content);
      return contentData;
    } catch (e) {
      console.error("Error parsing content field:", e);
      return null;
    }
  };

  interface PersonaFilters {
    [segmentId: string]: {
      [filterType: string]: string[] | [];
    };
  }

  interface ContentData {
    [key: string]: unknown;
    audience_id?: number;
    audience_name?: string;
    name?: string;
    goal?: string;
    task?: string;
    context?: string;
    content_type?: string;
    content_subject?: string;
    company_context?: string;
    segment_ids?: number[];
    persona_filters?: PersonaFilters;
  }
  const simulation_responseparsedOutput = (() => {
    try {
      const parsed = JSON.parse(simulation?.simulation_response || "{}");

      return parsed || "No analysis available.";
    } catch (error) {
      return "Invalid simulation response format.";
    }
  })();
  const objectFormateCode = (data: any): string | JSX.Element => {
    try {
      if (Array.isArray(data)) {
        const first = data[0];

        // Base64 image
        if (typeof first === "string" && first.startsWith("data:image")) {
          return (
            <img
              src={first}
              alt="Simulation Result"
              className="rounded shadow max-w-full h-auto"
            />
          );
        }

        // Markdown/text string
        if (typeof first === "string") {
          return first;
        }
      }

      // If JSON string in data.data
      if (data && typeof data === "object" && typeof data.data === "string") {
        const parsed = JSON.parse(data.data);
        return parsed?.output || "No analysis available.";
      }

      return "No analysis available.";
    } catch (error) {
      return "Invalid simulation response format.";
    }
  };

  const optimization_responseParsedOutput = (() => {
    try {
      const parsed = JSON.parse(simulation?.optimization_response || "{}");
      return parsed || "No analysis available.";
    } catch (error) {
      return "Invalid simulation response format.";
    }
  })();
  const renderSimulationSummaryDropdown = () => {
    const contentData = parseContentField() as ContentData | null;

    if (!contentData || !simulation) return null;

    // Function to render icon based on the key
    const getIconForKey = (key: string): JSX.Element => {
      switch (key) {
        case "audience_id":
        case "audience_name":
          return <Users className="h-4 w-4 text-blue-600" />;
        case "task":
          return <Brain className="h-4 w-4 text-indigo-600" />;
        case "name":
          return <FileText className="h-4 w-4 text-teal-600" />;
        case "goal":
          return <Target className="h-4 w-4 text-green-600" />;
        case "context":
          return <MessageSquare className="h-4 w-4 text-amber-600" />;
        case "content_type":
          return <FileText className="h-4 w-4 text-purple-600" />;
        case "content_subject":
          return <Bookmark className="h-4 w-4 text-pink-600" />;
        case "company_context":
          return <Briefcase className="h-4 w-4 text-gray-600" />;
        case "segment_ids":
          return <Layers className="h-4 w-4 text-blue-600" />;
        case "persona_filters":
          return <Filter className="h-4 w-4 text-orange-600" />;
        default:
          return <FileText className="h-4 w-4 text-blue-600" />;
      }
    };

    // Extract important fields for the summary section
    const importantFields = ["name", "audience_name", "goal", "content_type"];
    const importantData = Object.fromEntries(
      Object.entries(contentData).filter(([key]) =>
        importantFields.includes(key)
      )
    );

    // Additional fields that aren't segments, filters, or personas
    const additionalFields = Object.fromEntries(
      Object.entries(contentData).filter(
        ([key]) =>
          !importantFields.includes(key) &&
          key !== "segment_ids" &&
          key !== "persona_filters" &&
          // key !== 'task' &&
          key !== "audience_id"
      )
    );

    const formatValue = (key: string, value: unknown): React.ReactNode => {
      // Format segment_ids
      if (key === "segment_ids" && Array.isArray(value)) {
        if (simulation?.segments) {
          return (
            <div className="flex flex-wrap gap-2 mt-2">
              {value.map((segmentId, idx) => {
                const segment = simulation.segments?.find(
                  (s) => s.id === segmentId
                );
                return (
                  <span
                    key={idx}
                    className="px-3 py-1.5 bg-blue-50/80 text-blue-700 border border-blue-200 rounded-full text-xs font-medium flex items-center gap-1.5"
                  >
                    <Globe className="h-3 w-3" />
                    {segment ? segment.name : `Segment ${segmentId}`}
                  </span>
                );
              })}
            </div>
          );
        }
      }

      // Format persona_filters
      if (
        key === "persona_filters" &&
        typeof value === "object" &&
        value !== null
      ) {
        const personaFilters = value as Record<string, Record<string, unknown>>;

        return (
          <div className="mt-3 space-y-4">
            {Object.entries(personaFilters).length === 0 ? (
              <div className="text-sm text-gray-500 italic text-center p-3">
                No filters have been applied
              </div>
            ) : (
              Object.entries(personaFilters).map(
                ([segmentId, filters], idx) => {
                  // Find the segment name from the simulation segments
                  const segmentName =
                    simulation?.segments?.find(
                      (s) => s.id === parseInt(segmentId)
                    )?.name || `Segment ${segmentId}`;

                  // Check if the segment has any non-empty filter arrays
                  const hasFilters = Object.entries(filters).some(
                    ([, values]) => Array.isArray(values) && values.length > 0
                  );

                  // If no filters with values, don't render this segment's filter card
                  if (!hasFilters) return null;

                  return (
                    <div
                      key={idx}
                      className="bg-white p-4 rounded-lg shadow-sm border border-green-100"
                    >
                      <div className="text-sm font-medium text-green-800 mb-3 pb-2 border-b border-green-50 flex items-center">
                        <div className="bg-green-100 p-1.5 rounded-lg mr-2">
                          <Layers className="h-4 w-4 text-green-600" />
                        </div>
                        {segmentName}
                      </div>
                      <div className="space-y-3">
                        {Object.entries(filters)
                          .filter(
                            ([, filterValues]) =>
                              // Only include filter categories that have values
                              Array.isArray(filterValues) &&
                              filterValues.length > 0
                          )
                          .map(([filterKey, filterValues], fidx) => (
                            <div
                              key={fidx}
                              className="bg-green-50/50 rounded-lg p-3"
                            >
                              <div className="flex items-center mb-2">
                                <Filter className="h-3.5 w-3.5 mr-1.5 text-green-700" />
                                <span className="text-xs font-semibold text-green-800 uppercase">
                                  {filterKey}
                                </span>
                              </div>
                              <div className="flex flex-wrap gap-2">
                                {(filterValues as string[]).map((val, vidx) => (
                                  <span
                                    key={vidx}
                                    className="px-2.5 py-1 bg-white text-gray-700 border border-green-200 rounded-full text-xs font-medium shadow-sm"
                                  >
                                    {val}
                                  </span>
                                ))}
                              </div>
                            </div>
                          ))}
                      </div>
                    </div>
                  );
                }
              )
            )}
          </div>
        );
      }

      // For simple values
      return (
        <div className="text-sm text-gray-800 whitespace-pre-wrap">
          {typeof value === "string" ? value : objectFormateCode(value)}
        </div>
      );
    };
    const SectionHeader = ({ icon, title, number }: any) => {
      return (
        <div className="flex items-center w-full mb-3">
          {/* Icon and Title */}
          <div className="flex items-center  text-primary2 gap-3 font-medium text-lg">
            {icon}
            <span>{title}</span>
          </div>

          {/* Line */}
          <div className="flex-grow border-t border-black mx-4" />

          {/* Number */}
          <div className="font-medium text-base">
            {number < 10 ? "0" : ""}
            {number}
          </div>
        </div>
      );
    };

    return (
      <div
        className={`fixed top-0 right-0 z-50 h-full w-1/2 max-w-[100vw] bg-white shadow-lg border-l border-gray-200
          transition-transform duration-500 ease-in-out overflow-auto scrollbar-hide  
          ${isDetailsDropdownOpen ? "translate-x-0" : "translate-x-full"}
        `}
      >
        {/* Header */}
        <div className="p-[30px]  bg-white  flex items-center gap-3 justify-between">
          <h2 className="text-2xl font-semibold text-primary2 ">
            Simulation Inputs
          </h2>
          <button onClick={() => setIsDetailsDropdownOpen(false)}>
            <X />
          </button>
        </div>

        {/* Main content */}
        <div className="p-5 relative">
          {/* <div className="flex items-center justify-end gap-2 text-xs text-gray-600 mb-4">
            <Calendar className=" h-3.5 w-3.5" />
            <span>{new Date(simulation.created_at).toLocaleString()}</span>
          </div> */}
          {/* Key information grid */}
          <SectionHeader
            icon={<PiUser size={24} />}
            title="Creator Detail"
            number={1}
          />
          <div className="bg-[#FAFAFA] p-4 flex flex-col gap-3 items-center rounded-[20px] mb-6">
            {Object.entries(importantData).map(
              ([key, value], index: number) => (
                <div
                  key={key}
                  className={`${
                    Object.entries(importantData).length == index + 1
                      ? ""
                      : "border-b pb-3"
                  } flex items-center gap-3 justify-between border-[#E8E8E8]  w-full`}
                >
                  <span className="text-[#595E64] text-sm font-medium capitalize">
                    {key.replace(/_/g, " ")}
                  </span>
                  <span className="text-right text-sm font-semibold text-gray-900">
                    {value as string}
                  </span>
                </div>
              )
            )}
          </div>

          {/* Segments section */}
          {contentData.segment_ids && (
            <div className="mb-6">
              <SectionHeader
                icon={<PiLineSegments size={24} />}
                title="Audience Segments"
                number={2}
              />
              <div className="bg-green-50/30 p-3 rounded-lg border border-green-100">
                {formatValue("segment_ids", contentData.segment_ids)}
              </div>
            </div>
          )}

          {/* Filters section */}
          {contentData.persona_filters &&
            Object.keys(contentData.persona_filters).length > 0 && (
              <div className="mb-6">
                <SectionHeader
                  icon={<BiFilterAlt size={24} />}
                  title="Applied Filters"
                  number={3}
                />
                <div className="bg-amber-50/30 rounded-lg border border-amber-100">
                  {formatValue("persona_filters", contentData.persona_filters)}
                </div>
              </div>
            )}

          {contentData.images && contentData.images.length > 0 && (
            <div className="mb-6">
              <div className="flex items-center mb-2">
                {/* <div className="mr-2 bg-purple-100 p-1.5 rounded-md">
											<Image className="h-4 w-4 text-purple-600" />
										</div> */}
                <h3 className="text-base font-medium text-purple-800">
                  Images
                </h3>
              </div>
              <div className="bg-purple-50/30 p-3 rounded-lg border border-purple-100">
                {contentData.images.map((imageData, index) => (
                  <img
                    key={index}
                    src={imageData}
                    alt={`Image ${index + 1}`}
                    className="w-full h-auto rounded-lg mb-2"
                  />
                ))}
              </div>
            </div>
          )}

          {/* Used Personas - COLLAPSIBLE */}
          {simulation.personas && simulation.personas.length > 0 && (
            <div className="mb-6 border border-purple-100 rounded-lg overflow-hidden">
              <div
                className="flex items-center justify-between p-3 bg-gradient-to-r from-purple-50 to-purple-50/70 cursor-pointer"
                onClick={() => toggleCard("personas")}
              >
                <div className="flex items-center">
                  <div className="mr-2 bg-purple-100 p-1.5 rounded-md">
                    <Users className="h-4 w-4 text-purple-600" />
                  </div>
                  <h3 className="text-base font-medium text-purple-800">
                    Used Profiles ({simulation.personas.length})
                  </h3>
                </div>
                <div className="text-purple-600">
                  {expandedCards.personas ? (
                    <ChevronUp className="h-5 w-5" />
                  ) : (
                    <ChevronDown className="h-5 w-5" />
                  )}
                </div>
              </div>

              {expandedCards.personas && (
                <div className="p-3 bg-white">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {simulation.personas.map((persona, index) => {
                      const personaInfo = extractPersonaInfo(persona.data);
                      return (
                        <div
                          key={index}
                          className="bg-purple-50/40 p-3 rounded-lg border border-purple-100"
                        >
                          <div className="flex justify-between items-start mb-2">
                            <div className="flex items-center space-x-2">
                              <div className="bg-purple-100 p-1 rounded-full">
                                <User className="h-3.5 w-3.5 text-purple-600" />
                              </div>
                              <p className="font-medium text-gray-800">
                                {personaInfo.name}
                              </p>
                            </div>
                            <div className="px-2 py-0.5 bg-purple-100 text-purple-700 rounded-full text-xs font-medium">
                              {persona.name
                                ? persona.name.replace(/_/g, " ")
                                : "Profile"}
                            </div>
                          </div>
                          <div className="grid grid-cols-2 gap-2 mt-2 border-t border-purple-100/60 pt-2 text-xs">
                            <div className="flex items-center space-x-1.5">
                              <Calendar className="h-3 w-3 text-purple-600/70" />
                              <p>
                                <span className="text-gray-600">Age:</span>{" "}
                                <span className="text-gray-900 font-medium">
                                  {personaInfo.age}
                                </span>
                              </p>
                            </div>
                            <div className="flex items-center space-x-1.5">
                              <Briefcase className="h-3 w-3 text-purple-600/70" />
                              <p>
                                <span className="text-gray-600">Role:</span>{" "}
                                <span className="text-gray-900 font-medium">
                                  {personaInfo.job_title}
                                </span>
                              </p>
                            </div>
                            {personaInfo.behavioral_archetype !== "N/A" && (
                              <div className="col-span-2 flex items-center space-x-1.5">
                                <Brain className="h-3 w-3 text-purple-600/70" />
                                <p>
                                  <span className="text-gray-600">
                                    Archetype:
                                  </span>{" "}
                                  <span className="text-gray-900 font-medium">
                                    {personaInfo.behavioral_archetype}
                                  </span>
                                </p>
                              </div>
                            )}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Additional Information */}
          {Object.keys(additionalFields).length > 0 && (
            <div className="mb-6">
              <div className="flex items-center mb-2">
                <div className="mr-2 bg-gray-100 p-1.5 rounded-md">
                  <HelpCircle className="h-4 w-4 text-gray-600" />
                </div>
                <h3 className="text-base font-medium text-gray-800">
                  Additional Information
                </h3>
              </div>

              <div className="space-y-3">
                {Object.entries(additionalFields).map(([key, value], idx) => (
                  <div
                    key={idx}
                    className="bg-gray-50/70 p-3 rounded-lg border border-gray-200"
                  >
                    <div className="flex items-center mb-1.5 pb-1.5 border-b border-gray-100">
                      <div className="bg-gray-100 p-1.5 rounded mr-2">
                        {getIconForKey(key)}
                      </div>
                      <p className="text-xs font-semibold text-gray-700 uppercase tracking-wider">
                        {key.replace(/_/g, " ")}
                      </p>
                    </div>
                    <div className="text-sm ml-1 mt-2">
                      {formatValue(key, value)}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        {/* <div className="p-3 bg-gray-50 border-t border-gray-200 flex justify-end">
          <button
            onClick={() => setIsDetailsDropdownOpen(false)}
            className="px-3 py-1.5 bg-white border border-gray-300 rounded text-sm font-medium text-gray-600 hover:bg-gray-50"
          >
            Close
          </button>
        </div> */}
      </div>
    );
  };

  const renderLoadingAnimation = () => (
    <div className="flex flex-col items-center justify-center py-16">
      {/* <div className="animate-spin mb-6">
        <Loader2 className="h-12 w-12 text-primary" />
      </div> */}
      <img src={StartingImg} />
      <h3 style={{ color: "hsl(174, 97.2%, 27.6%)" }} className="text-[28px] mt-4 font-semibold mb-2">
        {simulationStatus === "pending"
          ? "Starting simulation..."
          : currentStep}
      </h3>
      <p className="text-black text-[14px]  font-medium text-center max-w-md">
        {simulationStatus === "pending"
          ? "We are initializing your simulation..."
          : "This process typically takes 2-5 minutes. Please wait while we run your simulation."}
      </p>
    </div>
  );

  const renderSimulationAnalysis = () => (
    <div
      className=""
      // style={{ maxHeight: "calc(90vh - 120px)" }}
    >
      {/* <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-medium text-gray-900">
          Simulation Analysis
        </h3>

        <button
          onClick={() => setIsDetailsDropdownOpen(!isDetailsDropdownOpen)}
          className="flex items-center space-x-2 px-3 py-1.5 rounded-md bg-blue-50 hover:bg-blue-100 text-blue-700 border border-blue-200 transition-colors text-sm"
        >
          <FileText className="h-4 w-4" />
          <span>Simulation Inputs</span>
          {isDetailsDropdownOpen ? (
            <ChevronUp className="h-4 w-4 ml-1" />
          ) : (
            <ChevronDown className="h-4 w-4 ml-1" />
          )}
        </button>
      </div> */}

      {/* Dropdown for simulation summary */}
      <div className="relative">{renderSimulationSummaryDropdown()}</div>

      <div className="prose prose-primary max-w-none pb-8 markdown-body mt-4">
        <ReactMarkdown remarkPlugins={[remarkGfm]} rehypePlugins={[rehypeRaw]}>
          {simulation_responseparsedOutput?.output ||
            "No analysis available yet."}
        </ReactMarkdown>
        {simulation_responseparsedOutput?.tables?.map(
          (item: any, index: number) => {
            return (
              <div key={index}>
                <h5>{item.title}</h5>
                <table>
                  <thead>
                    <tr>
                      {item?.headers?.map((heading: any, idx: number) => (
                        <th key={idx}>{heading}</th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    {item?.data?.map((i: any, indx: number) => (
                      <tr key={indx}>
                        <td>{indx + 1}</td>
                        <td>{i.profile_name}</td>
                        <td>{i.visual_appeal}</td>
                        <td>{i.message_clarity}</td>
                        <td>{i.emotional_connection}</td>
                        <td>{i.trust_credibility}</td>
                        <td>{i.purchase_intent}</td>
                        <td>{i.value_perception}</td>
                        <td>{i.brand_fit}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            );
          }
        )}

        <div className="h-5"> </div>
      </div>
    </div>
  );

  const renderAdvancedAnalysis = () => (
    <div className="h-full overflow-auto p-6">
      {optimizationStatus === "completed" ? (
        <div className="mb-4">
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            Advanced Analysis
          </h3>
          <div className="prose prose-blue max-w-none mb-3 markdown-body">
            <ReactMarkdown
              remarkPlugins={[remarkGfm]}
              rehypePlugins={[rehypeRaw]}
            >
              {optimization_responseParsedOutput?.output ||
                "No advanced analysis available yet."}
            </ReactMarkdown>
            {optimization_responseParsedOutput?.analysis && (
              <div className="h-5">
                <h5>Analysis</h5>
                <p>
                  <ReactMarkdown
                    remarkPlugins={[remarkGfm]}
                    rehypePlugins={[rehypeRaw]}
                  >
                    {optimization_responseParsedOutput?.analysis ||
                      "No advanced analysis available yet."}
                  </ReactMarkdown>
                </p>
              </div>
            )}
          </div>
        </div>
      ) : (
        <div className="flex flex-col items-center justify-center h-64">
          <Loader2 className="w-8 h-8 animate-spin text-blue-500 mb-4" />
          <h3 className="text-xl font-semibold mb-2">
            Generating advanced analysis...
          </h3>
          <p className="text-gray-500 text-center max-w-md">
            We're optimizing the recommendations for your simulation. This may
            take a few minutes.
          </p>
        </div>
      )}
    </div>
  );

  const renderChatInterface = () => (
    <div className="flex flex-col max-w-[400px] min-w-[400px] w-full sticky left-0 top-16  bg-gray-50">
      <h3 className="mb-5 font-semibold text-2xl">Chat with Simulation</h3>
      {/* <div className="border-b border-gray-200 bg-white">
        <nav className="flex gap-4 px-6" aria-label="Tabs">
          <button
            onClick={() => handleChatTabChange("simulation")}
            className={`py-4 px-1 inline-flex items-center border-b-2 text-sm font-medium ${
              chatTab === "simulation"
                ? "border-primary text-primary"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            <Brain className="mr-2 h-4 w-4" />
            Chat with Simulation
          </button>
          <button
            onClick={() => handleChatTabChange('persona')}
            className={`py-4 px-1 inline-flex items-center border-b-2 text-sm font-medium ${
              chatTab === 'persona'
                ? 'border-primary text-primary'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            <User className="mr-2 h-4 w-4" />
            Chat with Persona
          </button>
        </nav>
      </div> */}

      {chatTab === "persona" && (
        <div className="border-b border-gray-200 p-3 bg-white">
          <div className="relative">
            <div className="flex items-center mb-1">
              <label className="text-xs font-medium text-gray-700 flex items-center">
                Select a Profile to chat with
                <div
                  className="relative ml-1"
                  onMouseEnter={() => setShowTooltip(true)}
                  onMouseLeave={() => setShowTooltip(false)}
                >
                  <HelpCircle className="h-3 w-3 text-gray-400" />
                  {showTooltip && (
                    <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 bg-gray-800 text-white text-xs rounded shadow-lg whitespace-nowrap z-10">
                      Pick to change the profile you're chatting with
                    </div>
                  )}
                </div>
              </label>
            </div>
            <button
              onClick={() => setDropdownOpen(!dropdownOpen)}
              className={`w-full flex items-center justify-between px-4 py-2 text-sm rounded-md border ${
                dropdownOpen
                  ? "border-primary ring-2 ring-primary/20"
                  : "border-gray-300"
              } bg-white hover:bg-blue-50 transition-colors`}
            >
              {selectedPersona && simulation?.personas ? (
                (() => {
                  const selectedPersonaObj = simulation.personas.find(
                    (p) => p.id === selectedPersona
                  );
                  if (selectedPersonaObj) {
                    const info = extractPersonaInfo(selectedPersonaObj.data);
                    return (
                      <div className="flex items-center">
                        <User className="h-4 w-4 mr-2 text-primary" />
                        <span>
                          {info.name} ({info.age}, {info.occupation})
                        </span>
                      </div>
                    );
                  }
                  return "Select a profile";
                })()
              ) : (
                <div className="flex items-center">
                  <User className="h-4 w-4 mr-2 text-gray-400" />
                  <span>Select a profile</span>
                </div>
              )}
              <ChevronDown
                className={`h-4 w-4 ml-2 text-primary transition-transform ${
                  dropdownOpen ? "rotate-180" : ""
                }`}
              />
            </button>

            {!dropdownOpen && (
              <div className="text-xs text-primary mt-1 ml-1 animate-pulse">
                Click to change profile
              </div>
            )}

            {dropdownOpen && (
              <div className="absolute z-10 mt-1 w-full bg-white rounded-md shadow-lg max-h-56 overflow-auto py-1 border border-gray-200">
                {simulation?.personas?.map((persona) => {
                  const info = extractPersonaInfo(persona.data);
                  return (
                    <button
                      key={persona.id}
                      onClick={() => {
                        selectPersona(persona.id);
                        setDropdownOpen(false);
                      }}
                      className={`w-full text-left px-4 py-2 text-sm hover:bg-blue-50 flex items-center ${
                        selectedPersona === persona.id
                          ? "bg-blue-50 text-primary"
                          : "text-gray-700"
                      }`}
                    >
                      <User className="h-3 w-3 mr-2" />
                      <div>
                        <div className="font-medium">{info.name}</div>
                        <div className="text-xs text-gray-500">
                          {info.age}, {info.occupation}
                        </div>
                      </div>
                    </button>
                  );
                })}
              </div>
            )}
          </div>
        </div>
      )}

      <div
        className="flex-1 overflow-y-auto p-4 bg-white min-h-[400px] scrollbar-hide max-h-[450px]  rounded-t-2xl"
        ref={chatContainerRef}
      >
        <div className="space-y-4">
          {console.log(545151, chatHistory)}
          {chatHistory?.length == 0 ? (
            <div className="text-center text-gray-500 py-12">
               <img src={ChatImg} className="mx-auto" alt=""  />
              <p className="text-black text-[14px] mt-4 font-medium">No messages yet. Start the conversation!</p>
            </div>
          ) : (
            chatHistory.map((msg, idx) => {
              // For simulation tab, only show messages with role 'use' (user) or 'sim' (simulation)
              // For persona tab, only show messages with role 'user' or 'persona'
              const isUserMessage =
                chatTab === "simulation"
                  ? msg.role === "use"
                  : msg.role === "use_persona";

              const isValidMessage =
                chatTab === "simulation"
                  ? msg.role === "use" || msg.role === "sim"
                  : msg.role === "use_persona" || msg.role === "persona";

              // Skip rendering messages that don't belong in this tab
              if (!isValidMessage) return null;

              return (
                <div
                  key={idx}
                  className={`flex ${
                    isUserMessage ? "justify-end" : "justify-start"
                  } animate-fadeIn`}
                  style={{ animationDelay: `${idx * 100}ms` }}
                >
                  <div
                    className={`max-w-[80%] px-4 py-2 rounded-lg ${
                      isUserMessage
                        ? "bg-[#03e8d3] text-white rounded-br-none animate-slideInRight"
                        : "bg-white border border-gray-200 text-gray-800 rounded-bl-none animate-slideInLeft"
                    }`}
                  >
                    <div
                      className={
                        `${
                          isUserMessage
                            ? "prose prose-invert prose-sm max-w-none"
                            : "prose prose-sm max-w-none"
                        }` + "markdown-body"
                      }
                    >
                      <ReactMarkdown
                        remarkPlugins={[remarkGfm]}
                        rehypePlugins={[rehypeRaw]}
                      >
                        {msg.content}
                      </ReactMarkdown>
                    </div>
                  </div>
                </div>
              );
            })
          )}
          {sendingMessage && (
            <div className="flex justify-start animate-pulse">
              <div className="bg-white border border-gray-200 text-gray-500 px-4 py-2 rounded-lg rounded-bl-none max-w-[80%]">
                <div className="flex space-x-2">
                  <div
                    className="h-2 w-2 bg-gray-400 rounded-full animate-bounce"
                    style={{ animationDelay: "0ms" }}
                  ></div>
                  <div
                    className="h-2 w-2 bg-gray-400 rounded-full animate-bounce"
                    style={{ animationDelay: "200ms" }}
                  ></div>
                  <div
                    className="h-2 w-2 bg-gray-400 rounded-full animate-bounce"
                    style={{ animationDelay: "400ms" }}
                  ></div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      <div className="p-4 border-t border-gray-200 bg-white rounded-b-2xl">
        <div className="flex items-end gap-2 relative">
          <textarea
            ref={textareaRef}
            value={chatMessage}
            onChange={(e) => setChatMessage(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder={`Type your message to ${
              chatTab === "persona" && selectedPersona
                ? (() => {
                    const persona = simulation?.personas?.find(
                      (p) => p.id === selectedPersona
                    );
                    return persona ? extractPersonaInfo(persona.data).name : "";
                  })()
                : "the simulation"
            }...`}
            className="flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary"
            rows={2}
          />
          <button
            onClick={sendChatMessage}
            disabled={!chatMessage.trim() || sendingMessage}
            className={`flex items-center justify-center p-3 rounded-full ${
              chatMessage.trim() && !sendingMessage
                ? "bg-primary text-white hover:bg-blue-600"
                : "bg-gray-300 text-gray-500 cursor-not-allowed"
            }`}
          >
            <Send className="h-4 w-4" />
          </button>
        </div>
        <div className="text-xs text-gray-400 mt-1 text-right">
          Press Enter to send, Shift+Enter for new line
        </div>
      </div>
    </div>
  );

  // Render tabs based on simulation data and actual content
  const renderTabs = () => {
    // Show Advanced Analysis tab if num_tabs > 1, regardless of optimization_response status
    const showAdvancedTab = simulation?.num_tabs !== 1;

    return (
      <>
        <button
          onClick={() => setActiveTab("simulation")}
          className={`py-4 px-1 inline-flex items-center border-b-2 text-sm font-medium ${
            activeTab === "simulation"
              ? "border-blue-500 text-blue-600"
              : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
          }`}
        >
          <BarChart2 className="mr-2 h-4 w-4" />
          Simulation Analysis
        </button>

        {showAdvancedTab && (
          <button
            onClick={() => setActiveTab("advanced")}
            className={`py-4 px-1 inline-flex items-center border-b-2 text-sm font-medium ${
              activeTab === "advanced"
                ? "border-blue-500 text-blue-600"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            <Brain className="mr-2 h-4 w-4" />
            Advanced Analysis
            {optimizationStatus === "running" && (
              <span className="ml-2">
                <Loader2 className="h-3 w-3 animate-spin text-blue-500" />
              </span>
            )}
          </button>
        )}
      </>
    );
  };

  // When rendering the interface, if we're on the advanced tab but it shouldn't be shown,
  // automatically switch to simulation tab
  useEffect(() => {
    if (activeTab === "advanced" && simulation?.num_tabs === 1) {
      setActiveTab("simulation");
    }
  }, [simulation, activeTab]);

  return (
    <>
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-6">
          {error}
        </div>
      )}
      {/* ---------------------------------------------------------------------------- */}
      <div className="flex items-center justify-between w-full  gap-2 mb-4">
        {/* Tab group with animated background */}
        <div className="relative flex w-fit p-1 bg-cyan-50 rounded-full transition-all duration-300">
          {/* Animated background slider */}
          <div
            className="absolute top-0 left-0 h-full rounded-full bg-primary transition-all duration-300"
            style={sliderStyle}
          />

          {/* Tabs */}
          <div className="relative z-10 flex">
            <div
              ref={chatRef}
              onClick={() => {
                setActiveChatTab("chat");
                setIsSidebarVisible(false);
              }}
              className={`px-4 py-2 cursor-pointer rounded-full font-medium text-sm transition-all duration-300 ${
                activeChatTab === "chat" ? "text-white" : "text-black"
              }`}
            >
              Chat
            </div>
            <div
              ref={simulationRef}
              onClick={() => setActiveChatTab("simulation")}
              className={`px-4 py-2 cursor-pointer rounded-full font-medium text-sm transition-all duration-300 ${
                activeChatTab === "simulation" ? "text-white" : "text-black"
              }`}
            >
              Simulation Analysis
            </div>
          </div>
        </div>

        {/* Title */}
        <h2 className="font-semibold text-[28px] leading-[100%] tracking-[0em]">
          Analysis Dashboard
        </h2>
      </div>
      <hr className="mb-[20px]" />

      {loading ? (
        renderLoadingAnimation()
      ) : (
        <div
          className={`flex items-start justify-between gap-6 `}
          // style={{ height: "80vh" }}
        >
          {activeChatTab == "chat" && renderChatInterface()}
          <div className="w-full">
            <div className="flex items-center gap-2 justify-between">
              <h3 className="mb-5 font-semibold text-2xl">
                {activeTab === "simulation"
                  ? "Simulation Analysis"
                  : "Advanced Analysis"}
              </h3>

              <div className="flex justify-end gap-3 mb-[20px]">
                <button className="flex items-center justify-center w-[50px] h-[50px] rounded-full bg-white hover:bg-[#07E5D1] transition-colors transition-shadow duration-300 hover:shadow-lg">
                  <DownloadIcon className="h-5 w-5 text-black" />
                </button>
                <button className="flex items-center justify-center w-[50px] h-[50px] rounded-full bg-white hover:bg-[#07E5D1] transition-colors transition-shadow duration-300 hover:shadow-lg">
                  <CheckIcon className="h-5 w-5 text-black" />
                </button>
                <button className="flex items-center justify-center w-[50px] h-[50px] rounded-full bg-white hover:bg-[#07E5D1] transition-colors transition-shadow duration-300 hover:shadow-lg">
                  <RotateIcon className="h-5 w-5 text-black" />
                </button>
                <button
                  onClick={() => {
                    setIsDetailsDropdownOpen(true);
                  }}
                  className="flex items-center justify-center w-[50px] h-[50px] rounded-full bg-white hover:bg-[#07E5D1] transition-colors transition-shadow duration-300 hover:shadow-lg"
                >
                  <MchatIcon className="h-5 w-5 text-black" />
                </button>
              </div>
            </div>
            <div
              className={` bg-white rounded-xl shadow-sm overflow-hidden flex flex-col`}
            >
              <div className="border-b border-gray-200 flex-shrink-0">
                <nav className="flex gap-4 px-6" aria-label="Tabs">
                  {renderTabs()}
                </nav>
              </div>
              <div className="flex-grow overflow-hidden">
                {activeTab === "simulation"
                  ? renderSimulationAnalysis()
                  : renderAdvancedAnalysis()}
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default SimulationResultsContent;
